<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Hash;
use App\Models\Users;

class LoginController extends Controller
{
    public function showLoginPage()
    {
        return view('login');
    }

    public function login(Request $request)
    {

        $user = Users::where('email', $request->email)->first();

        if ($user && Hash::check($request->password, $user->password_hash)) {
            if ($user->role_id == 1) {
                Session::put('user_id', $user->user_id);
                Session::put('user_name', $user->first_name . ' ' . $user->last_name);
                Session::put('role_id', $user->role_id);
                Session::save();

                return redirect()->intended('/home-tutor');
            }
            elseif ($user->role_id == 2){
                Session::put('user_id', $user->user_id);
                Session::put('user_name', $user->first_name . ' ' . $user->last_name);
                Session::put('role_id', $user->role_id);
                Session::save();

                return redirect()->intended('/teachers-panel');
            }             
        }

        return redirect('/login')->with('error', 'Invalid credentials');
    }

    public function logout()
    {
        Session::flush();
        return redirect('/login')->with('success', 'Successfully Logged Out');
    }
}


<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Users;
use App\Models\Students;
use App\Models\Courses;
use App\Models\Modules;
use App\Models\Activities;
use App\Models\LongQuizzes;
use App\Models\AssessmentResult;
use App\Models\LongQuizAssessmentResult;

class MainController extends Controller
{
    private function checkStudentAccess()
    {
        if (!session()->has('user_id')) {
            return redirect('/login')->with('error', 'You must be logged in');
        }

        if (session('role_id') == 2) {
            return redirect('/teachers-panel');
        }

        // Allow only role_id == 1 to proceed
        return null;
    }

    public function landingRedirect()
    {
        if (!session()->has('user_id')) {
            return redirect('/login');
        }

        return session('role_id') == 1
            ? redirect('/home-tutor')
            : redirect('/teachers-panel');
    }


    public function profilePage()
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        return view('student.student-profile', compact('users'));
    }

    public function performancePage()
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        return view('student.student-performance', compact('users'));
    }

    public function courseList()
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        $courses = Courses::all();

        return view('student.dashboard', compact('courses', 'users'));
    }


    public function moduleList($courseID)
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        $course = Courses::with('modules.moduleimage')->findOrFail($courseID);
        $longquiz = Courses::with('longquizzes')->findOrFail($courseID);

        return view('student.modules', compact('course','longquiz', 'users'));
    }

    public function activityList($moduleID)
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        $module = Modules::with('activities.quiz')->findOrFail($moduleID);
        return view('student.activities', compact('module', 'users'));
    }

    public function lecturePage($activityID)
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        $activity = Activities::with('lecture')->findOrFail($activityID);
        return view('student.activity-lecture', compact('activity', 'users'));
    }

    public function tutorialPage($activityID)
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        $activity = Activities::with('tutorial')->findOrFail($activityID);
        return view('student.activity-tutorial', compact('activity', 'users'));
    }

    public function quizPage($activityID)
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $activity = Activities::with('quiz')->findOrFail($activityID);
        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $assessment = AssessmentResult::where('student_id', $userID)
            ->where('activity_id', $activityID)
            ->orderByDesc('is_kept')
            ->first();

        $attempts = AssessmentResult::where('student_id', $userID)
            ->where('activity_id', $activityID)
            ->count();

        $assessDisplay = AssessmentResult::where('student_id', $userID)
            ->where('activity_id', $activityID)
            ->orderBy('date_taken', 'asc')
            ->get();

        return view('student.activity-quiz', compact('activity', 'assessment', 'attempts', 'assessDisplay', 'users'));
    }

    public function summary($activityID)
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $activity = Activities::with('quiz')->findOrFail($activityID);
        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $assessment = AssessmentResult::where('student_id', $userID)
            ->where('activity_id', $activityID)
            ->orderBy('date_taken', 'desc')
            ->first();

        $attempts = AssessmentResult::where('student_id', $userID)
            ->where('activity_id', $activityID)
            ->count();

        $assessDisplay = AssessmentResult::where('student_id', $userID)
            ->where('activity_id', $activityID)
            ->orderBy('date_taken', 'asc')
            ->get();

        return view('student.activity-quiz-summary', compact('activity', 'assessment', 'attempts', 'assessDisplay', 'users'));
    }

    public function longquizPage($courseID, $longQuizID)
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $course = Courses::findOrFail($courseID);
        $longquiz = LongQuizzes::findOrFail($longQuizID);
        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $assessment = LongQuizAssessmentResult::where('student_id', $userID)
            ->where('long_quiz_id', $longQuizID)
            ->orderByDesc('is_kept')
            ->first();

        $attempts = LongQuizAssessmentResult::where('student_id', $userID)
            ->where('long_quiz_id', $longQuizID)
            ->count();

        $assessDisplay = LongQuizAssessmentResult::where('student_id', $userID)
            ->where('long_quiz_id', $longQuizID)
            ->orderBy('date_taken', 'asc')
            ->get();


        return view('student.long-quiz', compact('course', 'longquiz', 'assessment', 'attempts', 'assessDisplay', 'users'));
    }

    public function longquizSummary($courseID, $longQuizID)
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $course = Courses::findOrFail($courseID);
        $longquiz = LongQuizzes::findOrFail($longQuizID);
        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $assessment = LongQuizAssessmentResult::where('student_id', $userID)
            ->where('long_quiz_id', $longQuizID)
            ->orderBy('date_taken', 'desc')
            ->first();

        $attempts = LongQuizAssessmentResult::where('student_id', $userID)
            ->where('long_quiz_id', $longQuizID)
            ->count();

        $assessDisplay = LongQuizAssessmentResult::where('student_id', $userID)
            ->where('long_quiz_id', $longQuizID)
            ->orderBy('date_taken', 'asc')
            ->get();

        return view('student.long-quiz-summary', compact('course', 'longquiz', 'assessment', 'attempts', 'assessDisplay', 'users'));
    }

    public function studentPerformance($userID)
    {
        return view('student.student-performance', compact('activity', 'assessment'));
    }
}

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Activities;
use App\Models\AssessmentResult;
use App\Models\Questions;
use App\Models\Options;
use App\Models\LongQuizAssessmentResult;
use App\Models\StudentProgress;
use Illuminate\Support\Facades\Session;
use Carbon\Carbon;


class QuizController extends Controller
{
    public function computeStudentAnalytics($studentId)
    {
        // Short quiz data (with module_id)
        $short = AssessmentResult::where('student_id', $studentId)->where('is_kept', 1);

        // Long quiz data (no module_id)
        $long = LongQuizAssessmentResult::where('student_id', $studentId)->where('is_kept', 1)
            ->select('score_percentage', 'earned_points');

        // Averages
        $shortAvg = $short->avg('score_percentage');
        $longAvg = $long->avg('score_percentage');

        $shortEarned = $short->sum('earned_points');
        $longEarned = $long->sum('earned_points');

        $shortCount = $short->count();
        $longCount = $long->count();

        $combinedTotal = $short->sum('score_percentage') + $long->sum('score_percentage');
        $combinedCount = $shortCount + $longCount;
        $combinedAvg = $combinedCount > 0 ? $combinedTotal / $combinedCount : 0;

        $totalPoints = ($shortEarned + $longEarned) * 10;

        StudentProgress::updateOrCreate(
            ['student_id' => $studentId],
            [
                'average_score' => $combinedAvg,
                'score_percentage' => $combinedAvg,
                'total_points' => $totalPoints,
            ]
        );
    }

    public function startQuiz($activityID)
    {
        $activity = Activities::with('quiz.questions.options')->findOrFail($activityID);

        $questions = $activity->quiz->questions->shuffle()->take($activity->quiz->number_of_questions)->values();
        Session::put("quiz_{$activityID}_questions", $questions->pluck('question_id')->toArray());

        // Start timer (store deadline in session)
        $timeLimit = $activity->quiz->time_limit;
        Session::put("quiz_{$activityID}_started_at", Carbon::now('Asia/Manila'));
        $deadline = Carbon::now('Asia/Manila')->addSeconds($timeLimit);
        Session::put("quiz_{$activityID}_deadline", $deadline);
        Session::put("quiz_{$activityID}_in_progress", true);

        return redirect("/home-tutor/quiz/{$activityID}/s/q/0");
    }

    public function showQuestion($activityID, $index)
    {
        $studentID = session('user_id');
        $activity = Activities::with('quiz')->findOrFail($activityID);
        $questionIDs = Session::get("quiz_{$activityID}_questions");
        $deadline = Session::get("quiz_{$activityID}_deadline");

        // Get number of attempts the student has taken
        $currentAttempts = AssessmentResult::where('student_id', $studentID)
            ->where('activity_id', $activityID)
            ->count();

        // Get the max number of allowed attempts for the quiz
        $maxAttempts = $activity->quiz->number_of_attempts;

        if ($currentAttempts >= $maxAttempts) {
            return redirect("/home-tutor/quiz/{$activityID}")
                ->with('error', 'You have reached the maximum number of quiz attempts.');
        }

        if (!Session::get("quiz_{$activityID}_in_progress")) {
            return redirect("/home-tutor/module/{$activity->module_id}")
                ->with('error', 'Quiz has already ended or you accessed an invalid link.');
        }

        // 🔒 Protection: No session = Not taking quiz
        if (!$questionIDs || !$deadline) {
            return redirect("/home-tutor/quiz/{$activityID}")
                ->with('error', 'You must start the quiz first.');
        }

        // 🔒 Protection: Time already expired
        if (Carbon::now('Asia/Manila')->gt(Carbon::parse($deadline))) {
            Session::forget("quiz_{$activityID}_questions");
            Session::forget("quiz_{$activityID}_answers");
            Session::forget("quiz_{$activityID}_deadline");

            return redirect("/home-tutor/quiz/{$activityID}")
                ->with('error', 'Your quiz session has expired.');
        }

        // 🔒 Protection: Invalid index (out of bounds)
        if (!isset($questionIDs[$index])) {
            return redirect("/home-tutor/quiz/{$activityID}")
                ->with('error', 'Invalid question number.');
        }

        $questionID = $questionIDs[$index];
        $question = Questions::with(['options', 'questionimage'])->findOrFail($questionID);
        $remainingSeconds = (int) max(0, Carbon::now('Asia/Manila')->diffInSeconds(Carbon::parse($deadline), false));

        return response()->view('student.quiz-interface', [
            'activity' => $activity,
            'question' => $question,
            'index' => $index,
            'total' => count($questionIDs),
            'remainingSeconds' => $remainingSeconds,
        ]);
    }

    public function submitAnswer(Request $request, $activityID, $index)
    {
        $selectedOption = $request->input('answer');
        $answers = session()->get("quiz_{$activityID}_answers", []);
        $answers[$index] = $selectedOption;
        session()->put("quiz_{$activityID}_answers", $answers);

        $questionIDs = session("quiz_{$activityID}_questions");
        $nextIndex = $index + 1;

        $deadline = session("quiz_{$activityID}_deadline");
        $isAutoSubmit = $request->input('auto_submit') == 1;

        if ($isAutoSubmit || Carbon::now('Asia/Manila')->gt(Carbon::parse($deadline))) {
            $nextIndex = count($questionIDs); // force finish quiz
        }

        if (!$questionIDs || !$deadline) {
            return redirect("/home-tutor/quiz/{$activityID}")
                ->with('error', 'Invalid quiz session.');
        }

        if ($nextIndex < count($questionIDs)) {
            return redirect("/home-tutor/quiz/{$activityID}/s/q/{$nextIndex}");
        } else {
            $correct = 0;
            foreach ($answers as $i => $selectedOptionID) {
                $questionID = $questionIDs[$i] ?? null;
                if (!$questionID) continue;
                $correctOptionID = Options::where('question_id', $questionID)->where('is_correct', 1)->value('option_id');
                if ($selectedOptionID == $correctOptionID) $correct++;
            }

            $scorePercentage = round(($correct / count($questionIDs)) * 100);
            $earnedPoints = $correct;
            $studentID = session('user_id');

            $prevAttempts = AssessmentResult::where('student_id', $studentID)->where('activity_id', $activityID)->count();

            AssessmentResult::create([
                'result_id' => uniqid(),
                'student_id' => $studentID,
                'module_id' => Activities::find($activityID)->module_id,
                'activity_id' => $activityID,
                'score_percentage' => $scorePercentage,
                'date_taken' => Carbon::now('Asia/Manila'),
                'attempt_number' => $prevAttempts + 1,
                'tier_level_id' => 1,
                'earned_points' => $earnedPoints,
                'is_kept' => 0,
            ]);

            AssessmentResult::where('student_id', $studentID)->where('activity_id', $activityID)->update(['is_kept' => 0]);
            AssessmentResult::where('student_id', $studentID)->where('activity_id', $activityID)->orderByDesc('score_percentage')->first()->update(['is_kept' => 1]);

            Session::forget("quiz_{$activityID}_questions");
            Session::forget("quiz_{$activityID}_answers");
            Session::forget("quiz_{$activityID}_deadline");
            Session::forget("quiz_{$activityID}_in_progress");

            $this->computeStudentAnalytics($studentID);

            return redirect("/home-tutor/quiz/{$activityID}/summary")
                ->with('success', 'Finished quiz.');
        }
    }
}

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\LongQuizzes;
use App\Models\AssessmentResult;
use App\Models\LongQuizAssessmentResult;
use App\Models\LongQuizQuestions;
use App\Models\LongQuizOptions;
use App\Models\StudentProgress;
use Illuminate\Support\Facades\Session;
use Carbon\Carbon;

class LongQuizController extends Controller
{
    public function computeStudentAnalytics($studentId)
    {
    // Short quiz data (with module_id)
    $short = AssessmentResult::where('student_id', $studentId)->where('is_kept', 1);
    
    // Long quiz data (no module_id)
    $long = LongQuizAssessmentResult::where('student_id', $studentId)->where('is_kept', 1)
        ->select('score_percentage', 'earned_points');

    // Averages
    $shortAvg = $short->avg('score_percentage');
    $longAvg = $long->avg('score_percentage');

    $shortEarned = $short->sum('earned_points');
    $longEarned = $long->sum('earned_points');

    $shortCount = $short->count();
    $longCount = $long->count();

    $combinedTotal = $short->sum('score_percentage') + $long->sum('score_percentage');
    $combinedCount = $shortCount + $longCount;
    $combinedAvg = $combinedCount > 0 ? $combinedTotal / $combinedCount : 0;

    $totalPoints = ($shortEarned + $longEarned) * 10;

    StudentProgress::updateOrCreate(
        ['student_id' => $studentId],
        [
            'average_score' => $combinedAvg,
            'score_percentage' => $combinedAvg,
            'total_points' => $totalPoints,
        ]
    );
}

    public function startQuiz($courseID, $longQuizID)
    {
        $longquiz = LongQuizzes::findOrFail($longQuizID);

        $questions = $longquiz->longquizquestions->shuffle()->take($longquiz->number_of_questions)->values();
        Session::put("lq_{$longQuizID}_questions", $questions->pluck('long_quiz_question_id')->toArray());

        // Start timer (store deadline in session)
        $timeLimit = $longquiz->time_limit;
        Session::put("lq_{$longQuizID}_started_at", Carbon::now('Asia/Manila'));
        $deadline = Carbon::now('Asia/Manila')->addSeconds($timeLimit);
        Session::put("lq_{$longQuizID}_deadline", $deadline);
        Session::put("lq_{$longQuizID}_in_progress", true);

        return redirect("/home-tutor/long-quiz/{$courseID}/{$longQuizID}/s/q/0");
    }

    public function showQuestion($courseID, $longQuizID, $index)
    {
        $studentID = session('user_id');
        $longquiz = LongQuizzes::findOrFail($longQuizID);
        $questionIDs = Session::get("lq_{$longQuizID}_questions");
        $deadline = Session::get("lq_{$longQuizID}_deadline");


        // Get number of attempts the student has taken
        $currentAttempts = LongQuizAssessmentResult::where('student_id', $studentID)
            ->where('long_quiz_id', $longQuizID)
            ->count();

        // Get the max number of allowed attempts for the quiz
        $maxAttempts = $longquiz->number_of_attempts;
        if ($currentAttempts >= $maxAttempts) {
            return redirect("/home-tutor/long-quiz/{$courseID}/{$longQuizID}")
                ->with('error', 'You have reached the maximum number of quiz attempts.');
        }


        if (!Session::get("lq_{$longQuizID}_in_progress")) {
            return redirect("/home-tutor/long-quiz/{$courseID}/{$longQuizID}")
                ->with('error', 'Quiz has already ended or you accessed an invalid link.');
        }

        // 🔒 Protection: No session = Not taking quiz
        if (!$questionIDs || !$deadline) {
            return redirect("/home-tutor/long-quiz/{$courseID}/{$longQuizID}")
                ->with('error', 'You must start the quiz first.');
        }

        // 🔒 Protection: Time already expired
        if (Carbon::now('Asia/Manila')->gt(Carbon::parse($deadline))) {
            Session::forget("lq_{$longQuizID}_questions");
            Session::forget("lq_{$longQuizID}_answers");
            Session::forget("lq_{$longQuizID}_deadline");

            return redirect("/home-tutor/long-quiz/{$courseID}/{$longQuizID}")
                ->with('error', 'Your quiz session has expired.');
        }

        // 🔒 Protection: Invalid index (out of bounds)
        if (!isset($questionIDs[$index])) {
            return redirect("/home-tutor/long-quiz/{$courseID}/{$longQuizID}")
                ->with('error', 'Invalid question number.');
        }

        $questionID = $questionIDs[$index];
        $question = LongQuizQuestions::with(['longquizoptions', 'longquizimage'])->findOrFail($questionID);
        $remainingSeconds = (int) max(0, Carbon::now('Asia/Manila')->diffInSeconds(Carbon::parse($deadline), false));

        return response()->view('student.long-quiz-interface', [
            'course' => $courseID,
            'longquiz' => $longquiz,
            'question' => $question,
            'index' => $index,
            'total' => count($questionIDs),
            'remainingSeconds' => $remainingSeconds,
        ]);
    }

    public function submitAnswer(Request $request, $courseID, $longQuizID, $index)
    {
        $selectedOption = $request->input('answer');
        $answers = session()->get("lq_{$longQuizID}_answers", []);
        $answers[$index] = $selectedOption;
        session()->put("lq_{$longQuizID}_answers", $answers);

        $questionIDs = session("lq_{$longQuizID}_questions");
        $nextIndex = $index + 1;

        $deadline = session("lq_{$longQuizID}_deadline");
        $isAutoSubmit = $request->input('auto_submit') == 1;

        if ($isAutoSubmit || Carbon::now('Asia/Manila')->gt(Carbon::parse($deadline))) {
            $nextIndex = count($questionIDs); // force finish quiz
        }

        if (!$questionIDs || !$deadline) {
            return redirect("/home-tutor/long-quiz/{$courseID}/{$longQuizID}")
                ->with('error', 'Invalid quiz session.');
        }

        if ($nextIndex < count($questionIDs)) {
            return redirect("/home-tutor/long-quiz/{$courseID}/{$longQuizID}/s/q/{$nextIndex}");
        } else {
            $correct = 0;
            foreach ($answers as $i => $selectedOptionID) {
                $questionID = $questionIDs[$i] ?? null;
                if (!$questionID) continue;
                $correctOptionID = LongQuizOptions::where('long_quiz_question_id', $questionID)->where('is_correct', 1)->value('long_quiz_option_id');
                if ($selectedOptionID == $correctOptionID) $correct++;
            }

            $scorePercentage = round(($correct / count($questionIDs)) * 100);
            $earnedPoints = $correct;
            $studentID = session('user_id');

            $prevAttempts = LongQuizAssessmentResult::where('course_id', $courseID)->where('student_id', $studentID)->where('long_quiz_id', $longQuizID)->count();

            LongQuizAssessmentResult::create([
                'result_id' => uniqid(),
                'student_id' => $studentID,
                'course_id' => $courseID,
                'long_quiz_id' => $longQuizID,
                'score_percentage' => $scorePercentage,
                'date_taken' => Carbon::now('Asia/Manila'),
                'attempt_number' => $prevAttempts + 1,
                'earned_points' => $earnedPoints,
                'is_kept' => 0,
            ]);

            LongQuizAssessmentResult::where('student_id', $studentID)->where('long_quiz_id', $longQuizID)->update(['is_kept' => 0]);
            LongQuizAssessmentResult::where('student_id', $studentID)->where('long_quiz_id', $longQuizID)->orderByDesc('score_percentage')->first()->update(['is_kept' => 1]);

            Session::forget("lq_{$longQuizID}_questions");
            Session::forget("lq_{$longQuizID}_answers");
            Session::forget("lq_{$longQuizID}_deadline");
            Session::forget("lq_{$longQuizID}_in_progress");

            $this->computeStudentAnalytics($studentID);

            return redirect("/home-tutor/long-quiz/{$courseID}/{$longQuizID}/summary")
                ->with('success', 'Quiz has been submitted.');
        }
    }
}

[ComputeScores]
(After taking a quiz or long quiz, all assessments with is_kept = 1 (usually means that it is the highest score from a quiz) will be calculated
and will be displayed in the student-performance page. This is to update the student's grades.)
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\AssessmentResult;
use App\Models\LongQuizAssessmentResult;
use App\Models\StudentProgress;


class ComputeScores extends Controller
{
    public function computeStudentAnalytics($studentId)
{
    // Fetch short quiz scores from assessmentresult (is_kept = 1)
    $shortResults = AssessmentResult::
        where('student_id', $studentId)
        ->where('is_kept', 1)
        ->select('score_percentage', 'earned_points', 'module_id')
        ->get();

    // Fetch long quiz scores from long_assessmentresult (is_kept = 1)
    $longResults = LongQuizAssessmentResult::
        where('student_id', $studentId)
        ->where('is_kept', 1)
        ->select('score_percentage', 'earned_points', 'module_id')
        ->get();

    // Combine scores
    $allResults = $shortResults->concat($longResults);

    // Calculate Averages
    $avgShort = $shortResults->avg('score_percentage');
    $avgLong = $longResults->avg('score_percentage');
    $avgAll = $allResults->avg('score_percentage');

    // Total Points (earned_points * 10)
    $totalPoints = $allResults->sum('earned_points') * 10;

    // Optional: Print or debug
    // dd($avgShort, $avgLong, $avgAll, $totalPoints);

    // Save to studentprogress
    StudentProgress::updateOrInsert(
        ['student_id' => $studentId],
        [
            'average_score' => $avgAll,
            'score_percentage' => $avgAll,
            'total_points' => $totalPoints,
            'updated_at' => now()
        ]
    );

    // Return values (for display or view)
    return [
        'average_short' => round($avgShort, 2),
        'average_long' => round($avgLong, 2),
        'average_all' => round($avgAll, 2),
        'total_points' => $totalPoints,
    ];
}
}
