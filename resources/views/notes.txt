[1]
1.1 Fixed, deleted repeating class
1.2 Considering this later. Ignore for now.
1.3 Ignore this too.

2.1 There is a table for long quizzes called longquiz
2.2 ModuleImage owner is from Modules, not Courses
2.3 Ignore

3.1 Changing all includes to the first syntax
3.2 I forgot to remove the comment (definitely rename this one). The name should still be referenced as is.
3.3 Fixed

4.1 It is just comments. models.txt and controllers.txt aren't one file then all classes are listed.
4.2 Ignore this.

5. Not all routes are final in the web.php. Will inform you updates later.

[2]
[1]
1.1 Fixed, deleted repeating class
1.2 Considering this later. Ignore for now.
1.3 Ignore this too.

2.1 There is a table for long quizzes called longquiz
2.2 ModuleImage owner is from Modules, not Courses
2.3 Ignore

3.1 Changing all includes to the first syntax
3.2 I forgot to remove the comment (definitely rename this one). The name should still be referenced as is.
3.3 Fixed

4.1 It is just comments. models.txt and controllers.txt aren't one file then all classes are listed.
4.2 Ignore this.

5. Not all routes are final in the web.php. Will inform you updates later.

[2]
Screening exams are diagnostic quizzes, which tells you what concepts and topics for each concepts you excel at or not.
Each screening exams have a concept, then topics as a sub element related to the concept. A topic has multiple questions, then a question. For example, using mathematics, an example concept is arithmetic, then a topic related to the concept arithmetic is addition. There would be questions related to addition which is linked to arithmetic, then there is another topic related to arithmetic which is subtraction, and there would be questions related to subtraction.

Logic of Screening Exam:
Screening Exam
    └▶ Concepts
            └▶  Topics
                    └▶  Questions
                            ├▶  Options
                            └▶  Images

create the view for performance page (no blade)
i just need the syntax

I need to display:
Course Name
    ├▶ Modules 
    │       ├▶ Practices - Average
    │       │       └▶ Practice Quiz 1        
    │       └▶ Short Quizzes - Average
    │               └▶ Short Quiz 1
    ├▶ Long Quizzes - Average
    │       └▶ Long Quiz 1
    ├▶ Screening Exam 1
    ├▶ Screening Exam 2 etc.
    └▶ Overall Grade (Short and Long Quiz)

There are tiers of attempts, one and two. For the first attempt, summary of screening exam would show you the results for each concept only. If the score for the concept is less than 60% (can be edited by the teacher/admin hence why there is a column handling this data), at the bottom of the scores for the concept there would be a button that links them to a page that displays educational resources (can be pdfs, youtube video embeds, or both) for the student user to study to improve in this area of concept. For example: You get 20/20 score in arithmetic questions, then 8/20 score in geometry. Below geometry is a button that sends them a page link that contains education resources for that concept.

Display logic:
First Attempt
[Arithmetic] 100%

[Geometry] 40%
    └▶[Button: Geometry Course Materials]

For the second attempt, display the topics and their grade. Then, display edu materials for topics which score is less than 50% (you can't change this which is why there is no column for this data). For example, addition: 10/10, subtraction 4/10.

Display logic:
Second Attempt
[Arithmetic] 20/20 - 100%
    ├▶[Addition] 10/10 - 100%
    └▶[Subtraction] 4/10 - 40%
        └▶[Button: Subtraction Educational Materials]

[Geometry] 12/20 - 40%
    ├▶[Trigonometry] 2/10 - 20%
    │    └▶[Button: Trigonometry Educational Materials]
    └▶[Pythagorean Theorem] 2/10 - 20%
        └▶[Button: Pythagorean Theorem Educational Materials]

As for the views and controllers, you can use the long-quiz format and just change the appropriate models. You can edit the model related to screening exam if needed.

For the database tables, there is already one for screening exams. Use those, then create models for them.

The long-quiz.php view is where the format for the display of diagnostics will be used. Tweaks will be done to achieve the display logic for the screening exam.

For the css, change the long-quiz class to screening class, then the background gradient should be shades of gray. Long-quiz uses the blue gradient.

Then I will ask later to create SQL lines to populate the data for an example screening exam.


Now, we can focus on CRUD for Long Quiz. Please read all files and take your time to analyze all this. You can copy the same format from module crud, but add necessary tweaks.
Logic for LongQuiz:
longquiz
    └▶questions
            ├▶image
            └▶options

Longquiz has a lot of variables:
course_id is inherited,
long_quiz_name
long_quiz_instructions
number_of_attempts
time_limit (for this one: let the user type in minutes, then convert it to seconds when sending this data)
number_of_questions
overall_points (this is not a user-inputted data, this data is based from the sum of all 'score' from longquiz_question table)
has_answers_shown
unlock_date
deadline_date

Longquiz doesn't have an image to represent a longquiz, but a question can either have an image or not.
As for the questions, make it so that the user can add or delete as many questions as they can (like add a + button to add an input field, then - to delete the input field (just make sure that you can't delete if there is only one question field to prevent issues.))
Questions can have maximum of 4 options, and make the one input field marked as green then it will be sent as is_correct = 1, while the rest are 0.


Here are the TEACHER ROUTES for reference
Route::prefix('teachers-panel')->group(function () {

    // Courses

    Route::get('/', [TeacherController::class,'teacherPanel']);
    Route::get('/course/{course}', [TeacherController::class, 'viewCourse']);
    
    Route::get ('/create-course', [TeacherController::class,'createCourse']);
    Route::post('/store-course', [TeacherController::class,'storeCourse']);

    Route::get   ('/course/{course}/edit',   [TeacherController::class, 'editCourse']);
    Route::post  ('/course/{course}/edit',   [TeacherController::class, 'updateCourse']);
    Route::post  ('/course/{course}/delete', [TeacherController::class, 'deleteCourse']);

        Route::prefix('course/{course}')->group(function () {

        // Modules

        Route::get('/module/{module}', [TeacherController::class, 'viewModule']);
        
        Route::get('/create-module',   [TeacherController::class, 'createModule']);
        Route::post('/store-module',  [TeacherController::class, 'storeModule']);
        
        Route::get('/module/{module}/edit',      [TeacherController::class, 'editModule']);
        Route::post('/module/{module}/edit',     [TeacherController::class, 'updateModule']);
        Route::post('/module/{module}/delete',   [TeacherController::class, 'deleteModule']);

    });

});


// This is the TeacherController. Copy the naming scheme.
<?php 

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Users;
use App\Models\Students;
use App\Models\Courses;
use App\Models\CourseImage;
use App\Models\Modules;
use App\Models\ModuleImage;
use App\Models\Screening;
use App\Models\Activities;
use App\Models\LongQuizzes;
use App\Models\AssessmentResult;
use App\Models\LongQuizAssessmentResult;

class TeacherController extends Controller
{
    private function checkTeacherAccess()
    {
        if (!session()->has('user_id')) {
            return redirect('/login');
        }

        if (session('role_id') == 1) {
            return redirect('/home-tutor');
        }

        return null;
    }

    public function teacherPanel()
    {
        if ($redirect = $this->checkTeacherAccess()) return $redirect;

        $userID = session('user_id');
        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        $courses = Courses::with('image')->get();

        return view('teacher.teachers-panel', compact('courses', 'users',));
    }

    // Course CRUD
    public function createCourse()
    {
        $userID = session('user_id');
        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        $courses = Courses::with('image')->get();

        return view('teacher.course-create', compact('courses', 'users'));
    }

    public function storeCourse(Request $req)
    {
        $req->validate([
            'course_name' => 'required|string|max:255',
            'course_code' => 'required|string|max:255',
            'course_description' => 'nullable|string',
            'image'        => 'nullable|image|max:2048'
        ]);

        $course = Courses::create([
            'course_id'          => uniqid(),
            'course_code'        => $req->course_code,
            'course_name'        => $req->course_name,
            'course_description' => $req->course_description ?? '',
            'course_picture'     => null,
            'start_date'         => null,
            'end_date'           => null,
            'teacher_id'         => session('user_id')
        ]);

        if ($req->hasFile('image')) {
            $blob = file_get_contents($req->file('image')->getRealPath());
            $mime = $req->file('image')->getMimeType();

            CourseImage::updateOrCreate(
                ['course_id' => $course->course_id],
                [
                    'image'     => $blob,
                    'mime_type' => $mime ?? 'image/jpeg'
                ]
            );
        }

        return redirect("/teachers-panel")
            ->with('success', 'A new course has been created.');
    }

    public function editCourse(Courses $course)
    {
        return view('teacher.course-edit', compact('course'));
    }

    public function updateCourse(Request $req, Courses $course)
    {
        $req->validate([
            'course_name' => 'required|string|max:255',
            'course_code' => 'required|string|max:255',
            'image'       => 'nullable|image|max:2048'
        ]);

        $course->course_name = $req->course_name;
        $course->course_code = $req->course_code;
        $course->course_description = $req->course_description;
        $course->save();

        if ($req->hasFile('image')) {
            $blob = file_get_contents($req->file('image')->getRealPath());
            $mime = $req->file('image')->getMimeType();

            $course->image()->updateOrCreate(
                ['course_id' => $course->course_id],
                [
                    'image' => $blob,
                    'mime_type' => $mime ?? 'image/jpeg'
                ]
            );
        }

        return redirect()->back()->with('success', 'Course has been updated.');
    }

    public function deleteCourse(Courses $course)
    {
        $course->delete();
        return redirect('/teachers-panel')->with('success', 'Course has been deleted.');
    }


    public function viewCourse(Courses $course)
    {
        if ($redirect = $this->checkTeacherAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $courses = Courses::with([
            'modules.moduleimage',
            'longquizzes',
            'screenings',
        ])->get();

        return view('teacher.view-course', compact('course', 'users'));
    }

    // Module CRUD
    public function createModule(Courses $course)
    {
        if ($redirect = $this->checkTeacherAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);
        $courses = Courses::with([
            'modules.moduleimage',
        ])->get();

        return view('teacher.module-create', compact('course','users'));
    }

    public function storeModule(Request $req, Courses $course)
    {
        $req->validate([
            'module_name'        => 'required|string|max:255',
            'image'              => 'nullable|image|max:2048'
        ]);

        $module = Modules::create([
            'module_id'         => uniqid(),
            'course_id'         => $course->course_id,
            'module_name'       => $req->module_name,
            'module_description' => $req->module_description
        ]);

        if ($req->hasFile('image')) {
            $blob = file_get_contents($req->file('image')->getRealPath());
            $mime = $req->file('image')->getMimeType();

            $module->moduleimage()->updateOrCreate(
                ['module_id' => $module->module_id],
                ['image'     => $blob,
                'mime_type' => $mime ?? 'image/jpeg']

            );
        }

        return redirect()->back()->with('success', 'A new module has been created.');
    }

    public function editModule(Courses $course, Modules $module)
    {
        return view('teacher.module-edit', compact('course', 'module'));
    }

    public function updateModule(Request $req, $courseID, Modules $module)
    {
        $req->validate([
            'module_name'        => 'required|string|max:255',
            'image'              => 'nullable|image|max:2048'
        ]);

        $module->update($req->only('module_name', 'module_description'));

        $blob = file_get_contents($req->file('image')->getRealPath());
        $mime = $req->file('image')->getMimeType();

        if ($req->hasFile('image')) {
            $blob = file_get_contents($req->file('image')->getRealPath());
            $mime = $req->file('image')->getMimeType();

            $module->moduleimage()->updateOrCreate(
                ['module_id' => $module->module_id],
                ['image'     => $blob,
                'mime_type' => $mime ?? 'image/jpeg']

            );
        }

        return redirect()->back()->with('success', 'Module has been updated.');
    }

    public function deleteModule($courseID, Modules $module)
    {
        $module->delete();
        return back()->with('success', 'Module deleted.');
    }

    public function viewModule(Courses $course, Modules $module)
    {
        if ($redirect = $this->checkTeacherAccess()) return $redirect;

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $module->load('activities.quiz');

        return view('teacher.view-module', compact('course', 'module', 'users'));
    }
}



We are now focusing on admin operations.
Inside the student-list page, all students will be listed alongside their section.

Image - Student Last Name, Student Fist Name - Student ID - Section - isCatchUp status - Button for their individual page [/student-list/student-info/{student_id}]

for image you can use this:
<?php
    if (empty($users->image?->image)) {;
        $imageURL = "/icons/no-img.jpg";
    } else {
        $blobData = $users->image?->image;
        $mimeType = getMimeTypeFromBlob($blobData);
        $base64Image = base64_encode($blobData);
        $imageURL = "data:$mimeType;base64,$base64Image";
    }
    ?>
    <div class="navibar-user mobile-display-disappear">
        <div class="navibar-img" style="background-image: url('<?= $imageURL ?>'); width: 2.5em; height: 2.5em; background-size: cover; background-position: center; border-radius: 50%; cursor: pointer;">
        </div>

the nav-admin.php partial already has getMimeTypeFromBlob() function and it looks like this:
function getMimeTypeFromBlob($blob)
{
    $finfo = new finfo(FILEINFO_MIME_TYPE);
    return $finfo->buffer($blob);
}


This is the routes for admin. Currently we are inside '/admin-panel/student-list'
Route::get('/admin-login', [AdminController::class, 'showLoginPage']);

Route::get('/admin-panel', [AdminController::class, 'adminPanel']);

Route::get('/admin-logout', [AdminController::class, 'logout']);

Route::prefix('/admin-panel')->group(function () {

    Route::get('/student-list', [AdminController::class, 'studentList']);

    Route::get('/teacher-list', [AdminController::class, 'teacherList']);

    Route::get('/edit-content', [AdminController::class, 'editContentPage']);

});


As for the teacher-list page, this will display all the teachers, and under it - all the courses they teach.
No need for a search bar.

For the button that leads to the teacher's info, this is where you can view and edit a teacher. Create a page for this function.

A teacher can teach multiple courses, that depends on the course_section table to see what courses can the teacher handle.
The admin can edit what courses can the teacher handle. The teacher can have multiple courses. I have removed teacher_id in course table because the course_section table now handles it.

A teacher can handle a section (group of students). They can also handle multiple sections, like courses.

Sections are about a group of certain students. In schools here in PH, they use sections to group students into 2, one for morning session, other for afternoon session. You can look it up for more context.

The students have their id for section in student table so that for students who have the same course but different section could have a different teacher (or can be the same.) The section just is there for scheduling purposes. This is so that I dont have to duplicate courses, as courses content remain the same even for different sections.



Time to revise the method to include Personalized Learning.
Data to be sent:
earned_score
number_of_questions
tier_id
concepts:
   ├▶concept_id
   ├▶concept_name
   ├▶concept_score_percentage
   ├▶passed
   └▶topics:
      ├▶topic_id
      ├▶topic_name
      ├▶topic_score_percentage
      └▶passed

If tier_id = 1, Tier 1 (include only concepts)
Calculate all scores (isCorrect) of concepts
if score percentage is less than 60%, put passed = false

If tier_id = 2, Tier 2 (include concepts and topics)
if score percentage is less than 60%, put passed = false

public function screeningExamResults(Request $r)
    {
        $r->validate([
            'student_id'   => 'required|exists:student,user_id',
            'screening_id' => 'required|exists:screening,screening_id',
        ]);

        $best = ScreeningResult::where([
            'student_id'   => $r->student_id,
            'screening_id' => $r->screening_id,
            'is_kept'      => 1,
        ])->first();

        return response()->json(['data' => $best ?? []]);
    }

Then, create a post method where the mobile app will send data to retrieve learning resource materials
(needed is concept_id, and topic_id)

Find all entries that match concept_id, and topic_id
If the topic_id sent is null, that means find the entry that has screening_topic_id as null (usuallty for tier 1)

return:
title
description
video_url (can be null)
pdf_blob (base64 encoded) (can be null)



Return:
section (section_name)
overall_grade (average percentage of all assessments EXCEPT screening)
points (points gathered from this course only - total_points from studentprogress)
practice-quiz:
    average
    module:
        module_name
        quiz:
            quiz_name
            percentage

short-quiz:
    average
    module:
        module_name
        quiz:
            quiz_name
            percentage

long-quiz:
    average
    quiz:
        long_quiz_name
        percentage

screening:
    screening_name
    percentage


Create a new method to get data for leaderboards
Route::get('get-gamified-elements',     [MobileModelController::class, 'showGamifiedElements']);
Needed: 'student_id'

Return
leaderboard-ranking (based on section)
section (section_name)
leaderboards: (loop with maximum of 15 students, starting from rank 1)
    student_name
    student_ranking
    student_points

achievements:
    achivement_id
    achivement_name
    achivement_description
    image_name (not a blob, mobile uses stock images)

achivements_retrived:
    achivement_id
    unlocked_at

badges:
    achivement_id
    achivement_name
    achivement_description

achivements_retrived:
    achivement_id
    unlocked_at

badges:
    badge_id
    badge_name
    badge_description
    image_name (not a blob, mobile uses stock images)

badges_retrived:
    badge_id
    unlocked_at

You can use both methods as reference, how I get the rankings, achievements and badges
public function performancePage()
    {
        if ($redirect = $this->checkStudentAccess()) return $redirect;

        $studentId = session('user_id');

        StudentAnalytics::refreshStudentSummary($studentId);
        AchievementService::evaluate($studentId);

        $users   = Users::with('image')->findOrFail($studentId);
        $overall = Students::findOrFail($studentId);

        $courses = StudentProgress::with('course')
            ->where('student_id', $studentId)
            ->get();

        $modules = ModuleProgress::with('module')
            ->where('student_id', $studentId)
            ->get()
            ->sortBy(function ($row) {

                return (int) preg_replace('/^.*?(\d+).*$/', '$1', $row->module->module_name);
            })
            ->values()
            ->groupBy('course_id');

        $practice = AssessmentResult::query()
            ->from('assessmentresult as ar')
            ->join('activity as a',  'ar.activity_id', '=', 'a.activity_id')
            ->join('quiz as q',      'a.activity_id',  '=', 'q.activity_id')
            ->selectRaw('
        a.module_id,
        ar.activity_id,
        a.activity_name as quiz_name,
        AVG(ar.score_percentage) as avg')
            ->where([
                ['ar.student_id',  $studentId],
                ['ar.is_kept',     1],
                ['q.quiz_type_id', 2],
            ])
            ->groupBy('a.module_id', 'ar.activity_id', 'a.activity_name')
            ->get()
            ->sortBy([
                fn($row) => (int) preg_replace('/^.*?(\d+).*$/', '$1', optional($row->module)->module_name ?? ''),
                fn($row) => $row->quiz_name,
            ])
            ->groupBy('module_id');


        $short = AssessmentResult::query()
            ->from('assessmentresult as ar')
            ->join('activity as a', 'ar.activity_id', '=', 'a.activity_id')
            ->join('quiz as q',     'a.activity_id',  '=', 'q.activity_id')
            ->selectRaw('
        a.module_id,
        ar.activity_id,
        a.activity_name as quiz_name,
        AVG(ar.score_percentage) as avg')
            ->where([
                ['ar.student_id',  $studentId],
                ['ar.is_kept',     1],
                ['q.quiz_type_id', 1],
            ])
            ->groupBy('a.module_id', 'ar.activity_id', 'a.activity_name')
            ->get()
            ->sortBy([
                fn($row) => (int) preg_replace('/^.*?(\d+).*$/', '$1', optional($row->module)->module_name ?? ''),
                fn($row) => $row->quiz_name,
            ])
            ->groupBy('module_id');


        $long = LongQuizAssessmentResult::query()
            ->join('longquiz as lq', 'long_assessmentresult.long_quiz_id', '=', 'lq.long_quiz_id')
            ->selectRaw('
        lq.course_id,
        lq.long_quiz_id,
        lq.long_quiz_name as quiz_name,
        AVG(score_percentage) as avg')
            ->where([
                ['student_id', $studentId],
                ['is_kept',    1],
            ])
            ->groupBy('lq.course_id', 'lq.long_quiz_id', 'lq.long_quiz_name')
            ->get()
            ->sortBy(fn($row) => (int) preg_replace('/^.*?(\d+).*$/', '$1', $row->quiz_name))
            ->groupBy('course_id');

        $screening = ScreeningResult::query()
            ->join('screening as s', 's.screening_id', '=', 'screeningresult.screening_id')
            ->where('screeningresult.student_id', $studentId)
            ->groupBy('s.screening_id', 's.course_id', 's.screening_name')
            ->selectRaw('
        s.screening_id,
        s.course_id,
        s.screening_name,
        MAX(score_percentage) as best_score')
            ->get()
            ->sortBy(fn($row) => (int) preg_replace('/^.*?(\d+).*$/', '$1', $row->screening_name))
            ->groupBy('course_id');

        $ownedAch = StudentAchievements::where('student_id', $studentId)
            ->get()
            ->keyBy('achievement_id');

        $achievements = Achievements::with('conditionType')
            ->orderBy('achievement_id')
            ->get()
            ->map(function ($a) use ($ownedAch) {
                $row = $ownedAch->get($a->achievement_id);
                $a->owned       = (bool) $row;
                $a->unlocked_at = $row?->unlocked_at;
                return $a;
            });

        $ownedBadge = StudentBadges::where('student_id', $studentId)
            ->get()                                 // student_id | badge_id | unlocked_at
            ->keyBy('badge_id');

        $badges = Badges::orderBy('points_required')
            ->get()
            ->map(function ($b) use ($ownedBadge) {
                $row = $ownedBadge->get($b->badge_id);
                $b->owned       = (bool) $row;
                return $b;
            });


        return view(
            'student.student-performance',
            compact(
                'users',
                'overall',
                'courses',
                'modules',
                'practice',
                'short',
                'long',
                'screening',
                'achievements',
                'badges'
            )
        );
    }

    public function leaderboardPage()
    {
        $studentId = session('user_id');

        /* 1. caller’s section */
        $me        = Students::with('user')->findOrFail($studentId);
        $sectionId = $me->section_id;

        $users     = Users::with('image')->findOrFail($studentId);

        /* 2. everyone in that section, HIGH-to-LOW points               */
        $ranked = Students::with('user')
            ->where('section_id', $sectionId)
            ->orderByDesc('total_points')
            ->orderBy('user_id')          // deterministic tie-break
            ->get()
            ->values();                   // fresh 0-based index

        /* 3. assign “tied” ranks (1-based, duplicates allowed)           */
        $prevPts = null;
        $rank    = 0;

        foreach ($ranked as $idx => $row) {
            if ($prevPts === null || $row->total_points < $prevPts) {
                // points dropped → next rank is current position +1
                $rank = $idx + 1;
            }
            $row->rank = $rank;           // attach for the view
            $prevPts   = $row->total_points;
        }

        /* 4. my own rank                                                  */
        $myRank = optional(
            $ranked->firstWhere('user_id', $studentId)
        )->rank;

        /* 5. Top-15 slice (ties can produce duplicate ranks)              */
        $top15 = $ranked->take(15);

        return view(
            'student.student-leaderboards',
            compact('top15', 'me', 'myRank', 'ranked', 'users')
        );
    }


Create a method to get all activities to appear in the calendar tiles for the mobile app.
Route::get('get-calendar-events',     [MobileModelController::class, 'showCalendarEvents']);
No request data needed.

Return
announcements:
    title
    description
    data
    is-urgent (original is_urgent is Int, but return as boolean 0 = false, 1 = true)

practice-quiz:
    name
    unlock_date
    deadline_date

short-quiz:
    name
    unlock_date
    deadline_date

long-quiz:
    name
    unlock_date
    deadline_date


Use this code block for reference.

use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use App\Models\{
  CalendarEvent,
  Activities,
  Modules,
  LongQuizzes,
  Sections,
  Screening,
  CourseSection
};

$userId   = session('user_id');
$roleId   = (int) session('role_id');           // 1 stu | 2 tch | 3 adm
$now      = Carbon::now();

/* helper ───────────────────────────────────────────────────────── */
function routeTo(array $piece, int $roleId): string
{
  // $piece = [ 'type'=>'short', 'course'=>…, 'section'=>…, 'act'=>… ]
  if ($roleId === 3) {  // ADMIN
    return "/admin-panel/edit-content/course/{$piece['course']}/{$piece['tail']}";
  }

  if ($roleId === 2) {  // TEACHER   (section **required**)
    return "/teachers-panel/course/{$piece['course']}/section/{$piece['section']}/{$piece['tail']}";
  }

  // STUDENT
  return "/home-tutor/course/{$piece['course']}/{$piece['tail']}";
}

$teachSections = CourseSection::where('teacher_id', $userId)
  ->pluck('section_id', 'course_id');   // [ course_id => section_id ]


$items = collect();

$calendar = [];

$add = function (string $day, array $row) use (&$calendar) {
  $calendar[$day][] = $row;
};

CalendarEvent::where('event_type_id', 1)
  ->orderByDesc('is_urgent')
  ->orderBy('date')
  ->get(['title', 'date', 'event_id', 'is_urgent'])
  ->each(function ($e) use ($add, &$items, $roleId) {

    /* ---------- 1) feed the calendar grid ---------- */
    $day = Carbon::parse($e->date)->format('Y-m-d');
    $add($day, [
      'marker' => '‼',
      'class'  => $e->is_urgent ? 'ann urgent' : 'ann',
      'text'   => $e->title,
    ]);

    /* ---------- 2) feed the notifications list ----- */
    $items->push([
      'title' => 'Announcement: ' . $e->title,
      'date'  => Carbon::parse($e->date)->format('M j, Y g:i A'),

      //  role-aware link
      'url'   => match ($roleId) {
        3       => "/admin-panel/announcement/{$e->event_id}",     // admin
        2       => "/teachers-panel/announcement/{$e->event_id}",  // teacher
        default => "/home-tutor/announcement/{$e->event_id}",      // student (or guest)
      },
    ]);
  });

/* ---------- PRACTICE + SHORT (quiz_type 2 / 1) ---------------- */
$quizColours = [2 => 'prc', 1 => 'sht'];               // css classes → colours
Activities::with('quiz', 'module')
  ->whereHas('quiz', fn($q) => $q->whereIn('quiz_type_id', [1, 2]))
  ->get()
  ->each(function ($a) use ($add, $quizColours) {
    $c  = $quizColours[$a->quiz->quiz_type_id];
    $un = Carbon::parse($a->unlock_date)->format('Y-m-d');
    $du = Carbon::parse($a->deadline_date)->format('Y-m-d');
    $add($un, ['marker' => '•', 'class' => $c, 'text' => $a->activity_name]);
    $add($du, ['marker' => '×', 'class' => $c, 'text' => $a->activity_name]);
  });

/* ---------- LONG QUIZZES ------------------------------------- */
LongQuizzes::all()->each(function ($l) use ($add) {
  $un = Carbon::parse($l->unlock_date)->format('Y-m-d');
  $du = Carbon::parse($l->deadline_date)->format('Y-m-d');
  $add($un, ['marker' => '•', 'class' => 'lng', 'text' => $l->long_quiz_name]);
  $add($du, ['marker' => '×', 'class' => 'lng', 'text' => $l->long_quiz_name]);
});


foreach (['practice' => 2, 'short' => 1] as $label => $qt) {

  Activities::with(['quiz', 'module'])
    ->where('unlock_date', '<=', $now)
    ->where('deadline_date', '>=', $now)
    ->whereHas('quiz', fn($q) => $q->where('quiz_type_id', $qt))
    ->when(
      $roleId === 1,
      fn($q) =>                        // students: hide if kept
      $q->whereDoesntHave(
        'results',
        fn($r) => $r->where('student_id', $userId)
          ->where('is_kept', 1)
      )
    )
    ->orderBy('deadline_date')
    ->get()
    ->each(function ($a) use (
      $label,
      $roleId,
      $teachSections,
      &$items
    ) {
      $course   = $a->module->course_id;
      $section  = $teachSections[$course] ?? null;
      $secName  = $section
        ? Sections::find($section)->section_name
        : '';

      /* -------- build URL PER-ROLE -------- */
      if ($roleId === 1) {                    // ── STUDENT
        $url = "/home-tutor/course/$course/" .
          "module/{$a->module_id}/quiz/{$a->activity_id}";
      } elseif ($roleId === 2) {              // ── TEACHER
        $url = "/teachers-panel/course/$course/section/$section/" .
          "module/{$a->module_id}/" .
          ($label === 'practice' ? 'practicequiz' : 'shortquiz') .
          "/{$a->activity_id}";
      } else {                                // ── ADMIN
        $url = "/admin-panel/edit-content/course/$course/" .
          "module/{$a->module_id}/" .
          ($label === 'practice' ? 'practicequiz' : 'shortquiz') .
          "/{$a->activity_id}";
      }

      /* -------- push the row into the collection -------- */
      $items->push([
        'title' => ($secName ? "[$secName] " : '') .
          '[' . strtoupper($label[0]) .
          ($label === 'short' ? 'Q' : '') . "] " .
          $a->activity_name,
        'date'  => 'Due: ' .
          Carbon::parse($a->deadline_date)
          ->format('M j, Y g:i A'),
        'url'   => $url,
      ]);
    });
}

/* === C. Long-Quizzes ========================================= */
LongQuizzes::where('unlock_date', '<=', $now)
  ->where('deadline_date', '>=', $now)
  ->when($roleId === 1, fn($q) => $q->whereDoesntHave(
    'keptResult',
    fn($r) => $r->where('student_id', $userId)->where('is_kept', 1)
  ))
  ->orderBy('deadline_date')
  ->get()
  ->each(function ($l) use (&$items, $teachSections, $roleId) {
    $course   = $l->course_id;
    $section  = $teachSections[$course] ?? null;
    $secName  = $section ? \App\Models\Sections::find($section)->section_name : '';

    $items->push([
      'title' => ($secName ? "[$secName] " : '') . '[LQ] ' . $l->long_quiz_name,
      'date' => 'Due: ' . Carbon::parse($l->deadline_date)->format('M j, Y g:i A'),
      'url'  => routeTo([
        'course' => $course,
        'section' => $section,
        'tail' => "longquiz/{$l->long_quiz_id}"
      ], $roleId)
    ]);
  });

/* === D. Screening Exams (always available) ==================== */
Screening::all()
  ->each(function ($s) use (&$items, $teachSections, $roleId) {
    $course  = $s->course_id;
    $section = $teachSections[$course] ?? null;
    $secName = $section ? \App\Models\Sections::find($section)->section_name : '';

    if ($roleId === 1) {
      $items->push([
        'title' => ($secName ? "[$secName] " : '') . '[SCREENING] ' . $s->screening_name,
        'date' => '',
        'url'  => routeTo([
          'course' => $course,
          'section' => $section,
          'tail' => "{$s->screening_id}"
        ], $roleId)
      ]);
    } else {
      $items->push([
        'title' => ($secName ? "[$secName] " : '') . '[SCREENING] ' . $s->screening_name,
        'date' => '',
        'url'  => routeTo([
          'course' => $course,
          'section' => $section,
          'tail' => "screening/{$s->screening_id}"
        ], $roleId)
      ]);
    }
  });

$notifications = $items->take(25);

/* ---- decorate every row once, right here  ----------------- */
$icon   = [
  'ann' => 'bell',        // announcement
  'prc' => 'practice-quiz',
  'sht' => 'short-quiz',
  'lng' => 'long-quiz',
  'scr' => 'screener'
];
$colour = [
  'ann' => '#c0392b',     // red
  'prc' => '#e67e22',     // orange
  'sht' => '#2e7d32',     // green
  'lng' => '#1565c0',     // blue
  'scr' => '#555555'      // grey
];

$notifications = $notifications->map(function ($n) use ($icon, $colour) {

  /* ---------- recognise the category from the prefix ---------- */
  $title = ($n['title']);          // normalise once

  switch (true) {
    case str_contains($title, 'Announcement:'):
      $cat = 'ann';
      break;

    case str_contains($title, '[P]'):      // Practice
      $cat = 'prc';
      break;

    case str_contains($title, '[SQ]'):     // Short-Quiz
      $cat = 'sht';
      break;

    case str_contains($title, '[LQ]'):     // Long-Quiz
      $cat = 'lng';
      break;

    default:                               // Screening or anything else
      $cat = 'scr';
  }  // screening (fallback)

  /* ---------- add colour + icon keys (always safe) ------------ */
  $n['icon']   = "/icons/{$icon[$cat]}.svg";
  $n['colour'] = $colour[$cat];

  return $n;      // collection → new enriched row
});

Create a method that gets the inboxes
Route::get('get-inbox',     [MobileModelController::class, 'showInbox']);
Needed: 'student_id'

Return
Messages:
    Incoming:
        sender_id
        sender_name
        image_blob (sender)
        subject
        message
        date
        unread (original (unread_count) is int, return as bool)

    Sent:
        recipient_id
        recipient_name
        image_blob (recipient)
        subject
        message
        date

Analyze what tables and models to be used using this reference.

namespace App\Http\Controllers;

use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

use App\Models\{
    Inbox,
    InboxParticipant,
    Message,
    MessageUserState,
    Users
};

public function index()
    {
        $userID = session('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $threads = Inbox::whereHas('participants', function ($q) use ($userID) {
            $q->where('inboxparticipant.participant_id', $userID);      // user is in thread
        })
            ->whereHas('messages', function ($q) use ($userID) {
                $q->where('sender_id', '!=', $userID);                      // …and at least ONE message is incoming
            })
            ->with(['participants', 'messages.userStates'])
            ->orderBy('timestamp', 'desc')
            ->get();

        $header = "Incoming Messages";

        $allUsers = Users::orderBy('role_id')
            ->orderBy('last_name')
            ->get(['user_id', 'first_name', 'last_name', 'role_id']);

        return view('inbox.index', compact('threads', 'allUsers', 'header', 'users'))->with('folder', 'inbox');
    }

    /** “All Sent” */
    public function sent()
    {
        $userID = session('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $threads = Inbox::whereHas('messages', function ($q) use ($userID) {
            $q->where('sender_id', $userID);                            // message filter :contentReference[oaicite:1]{index=1}
        })
            ->with(['participants', 'messages.userStates'])
            ->orderBy('timestamp', 'desc')
            ->get();

        $header = "Sent Messages";

        $allUsers = Users::orderBy('role_id')
            ->orderBy('last_name')
            ->get(['user_id', 'first_name', 'last_name', 'role_id']);

        return view('inbox.index', compact('threads', 'allUsers', 'header', 'users'))->with('folder', 'sent');
    }

    /* ===========================
     * OPEN A THREAD
     * =========================== */

    public function show(Inbox $inbox, Request $request)
    {
        $userID = session('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $folder = $request->query('folder', 'inbox');   // inbox | sent

        abort_unless($inbox->participants->contains('user_id', $userID), 403);

        /* mark everything read for me */
        MessageUserState::where('user_id', $userID)
            ->whereIn('message_id', $inbox->messages()->pluck('message_id'))
            ->update(['is_read' => 1]);

        $inbox->load(['messages.sender', 'messages.userStates']);

        /* ---------- rebuild sidebar according to current folder ---------- */
        $threads = Inbox::whereHas('participants', function ($q) use ($userID) {
            $q->where('inboxparticipant.participant_id', $userID);
        });

        if ($folder === 'sent') {
            // only threads with at least ONE message from me
            $threads->whereHas('messages', fn($q) => $q->where('sender_id', $userID));
        } else {                     // inbox
            // only threads with at least ONE message NOT from me
            $threads->whereHas('messages', fn($q) => $q->where('sender_id', '!=', $userID));
        }

        $threads = $threads->with(['participants', 'messages.userStates'])
            ->orderBy('timestamp', 'desc')
            ->get();

        $allUsers = Users::orderBy('role_id')->orderBy('last_name')
            ->get(['user_id', 'first_name', 'last_name', 'role_id']);

        return view('inbox.show', compact('inbox', 'threads', 'allUsers', 'folder', 'users'));
    }


we are now on the teacher's side on the mobile app

create a method to fetch course data based on the teacher's assignment (course_section table)

for example, a teacher has 2 course assignments on 2 different sections like in the database, so it should display 2 courses (same name, same image), then display their section name.

Return:
Data:
    course_id
    course_name
    image_blob
    section_id
    section_name


for getting modules, quizzes, and screening use a collection

kinda like this for example:
    public function showLongQuizList(Request $r)
    {
        $longquiz = LongQuizzes::where('course_id', $r->course_id)
            ->orderBy('long_quiz_name')          // optional: sort any way you like
            ->get();

        $longquiz = $longquiz
            ->sortBy(fn($lq) => $this->seq($lq->long_quiz_name))
            ->values();

        return response()->json([
            'data' => LongQuizCollectionResource::collection($longquiz)
        ]);
    }

<?php
namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class LongQuizCollectionResource extends JsonResource
{
    public function toArray($req)
    {
        return [
            'course_id'             => $this->course_id,
            'long_quiz_id'          => $this->long_quiz_id,
            'long_quiz_name'        => $this->long_quiz_name,
            'unlock_date'           => $this->unlock_date,
            'deadline_date'         => $this->deadline_date,
        ];
    }
}


Create method to get records of students from an activity quiz by a section
Route::get('get-student-quiz-result-by-section',      [MobileModelController::class, 'getStudentQuizResultBySection']);
Needed: 'activity_id' and 'section_id'

get the isKept entry per student from a certain section
Result
section_name
student:
    student_id
    student_name (last_name, first_name)
    earned_score (earned_points)
    number_of_questions
    score_percentage
    attempt_number
    date_taken

Create a method that fetches list of students in a section and their records for this course  Route::get('get-section-student-list-for-teacher',      [MobileModelController::class, 'getStudentList']); Needed: 'course_id' and 'section_id' 

Returns
student:
    student_id
    student_name
    image_blob
    points (from this course)

student's image_blob is found in student->image->image

you can use this method from the same controller for reference

public function showStudentAnalysis(Request $r)
    {
        /* 1 ───── validate --------------------------------------------------- */
        $r->validate([
            'student_id' => 'required|exists:student,user_id',
            'course_id'  => 'required|exists:course,course_id',
        ]);

        $studentId = $r->student_id;
        $courseId  = $r->course_id;

        /* 2 ───── section name & course points ------------------------------- */
        $student      = Students::with('section')->findOrFail($studentId);
        $sectionName  = $student->section->section_name ?? '';

        $courseName = Courses::where('course_id', $r->course_id)
            ->value('course_name');

        $points = StudentProgress::where([
            ['student_id', $studentId],
            ['course_id',  $courseId],
        ])->value('total_points') ?? 0;

        /* helper to shape each quiz row ------------------------------------- */
        $fmt = fn($row) => [
            'quiz_name'  => $row->quiz_name,
            'percentage' => round($row->avg, 2),
        ];

        /* 3 ───── practice- & short-quiz averages --------------------------- */
        $collectQuizRows = function (int $quizType) use ($studentId, $courseId) {
            return AssessmentResult::query()
                ->join('activity   as a', 'a.activity_id', '=', 'assessmentresult.activity_id')
                ->join('quiz       as q', 'q.activity_id',   '=', 'a.activity_id')
                ->join('module     as m', 'm.module_id',     '=', 'a.module_id')
                ->where([
                    ['assessmentresult.student_id', $studentId],
                    ['assessmentresult.is_kept',    1],
                    ['q.quiz_type_id',              $quizType],   // 2 = practice, 1 = short
                    ['m.course_id',                 $courseId],
                ])
                ->groupBy('m.module_name', 'a.activity_name')
                ->selectRaw('m.module_name, a.activity_name as quiz_name, AVG(score_percentage) as avg')
                ->get();
        };

        $practiceRows = $collectQuizRows(2);
        $shortRows    = $collectQuizRows(1);

        /* group by module for JSON ------------------------------------------ */
        $groupByModule = function ($rows) use ($fmt) {
            return $rows->groupBy('module_name')
                ->map(fn($grp) => [
                    'module_name' => $grp->first()->module_name,
                    'quiz'        => $grp->map($fmt)->values(),
                ])->values();
        };

        $practice = [
            'average' => round($practiceRows->avg('avg') ?? 0, 2),
            'module'  => $groupByModule($practiceRows),
        ];

        $short = [
            'average' => round($shortRows->avg('avg') ?? 0, 2),
            'module'  => $groupByModule($shortRows),
        ];

        /* 4 ───── long-quiz averages ---------------------------------------- */
        $longRows = LongQuizAssessmentResult::query()
            ->join('longquiz as lq', 'lq.long_quiz_id', '=', 'long_assessmentresult.long_quiz_id')
            ->where([
                ['long_assessmentresult.student_id', $studentId],
                ['long_assessmentresult.is_kept',    1],
                ['lq.course_id',                     $courseId],
            ])
            ->groupBy('lq.long_quiz_name')
            ->selectRaw('lq.long_quiz_name as quiz_name, AVG(long_assessmentresult.score_percentage) as avg')
            ->get();

        $long = [
            'average' => round($longRows->avg('avg') ?? 0, 2),
            'quiz'    => $longRows->map($fmt)->values(),
        ];

        /* 5 ───── screening (best score, if any) ----------------------------- */
        $screenRow = ScreeningResult::query()
            ->join('screening as s', 's.screening_id', '=', 'screeningresult.screening_id')
            ->where([
                ['screeningresult.student_id', $studentId],
                ['s.course_id',                $courseId],
            ])
            ->orderByDesc('screeningresult.score_percentage')
            ->orderBy('screeningresult.date_taken')
            ->select('s.screening_name', 'screeningresult.score_percentage')
            ->first();

        $screening = $screenRow
            ? [
                'screening_name' => $screenRow->screening_name,
                'percentage'     => round($screenRow->score_percentage, 2),
            ]
            : null;

        /* 6 ───── overall grade (exclude screening) ------------------------- */
        $components = array_filter([
            $practice['average'],
            $short['average'],
            $long['average'],
        ], fn($v) => $v > 0);

        $overall = $components
            ? round(array_sum($components) / count($components), 2)
            : 0;

        /* 7 ───── respond --------------------------------------------------- */
        return response()->json([
            'course'         => $courseName,
            'section'        => $sectionName,
            'overall_grade'  => $overall,
            'points'         => (int) $points,

            'practice_quiz'  => $practice,
            'short_quiz'     => $short,
            'long_quiz'      => $long,
            'screening'      => $screening,
        ]);
    }


Did the work, good job.
What is left now is the crud functions.
Add, Edit, and Delete (Modules, Long Quizzes, Screening, Lectures, Tutorials, and Quizzes)

You do not need section_id for creating these.

Create Routes for each, like this:
        Route::get('get-module',          [MobileModelController::class, 'showModule']); // Fetch Data Inside Edit CRUD
        Route::post('create-module',      [MobileModelController::class, 'storeModule']);
        Route::post('update-module',      [MobileModelController::class, 'updateModule']);
        Route::post('delete-module',      [MobileModelController::class, 'destroyModule']);

You don't need to create another route for fetching anything other than the module, because routes already exists for that.

Like for quizzes: get-quiz and get-quiz-content (for questions and answers)
        Route::get('get-quiz',                                      [MobileModelController::class, 'showQuiz']);
        Route::get('get-quiz-content',                              [MobileModelController::class, 'showQuizContent']);

The rest are the same. The can be used for edit view of activities and resources.
        Route::get('get-long-quiz',                                         [MobileModelController::class, 'showLongQuiz']);
        Route::get('get-long-quiz-content',                                 [MobileModelController::class, 'showLongQuizContent']);

        Route::get('get-screening-exam',            [MobileModelController::class, 'showScreeningExam']);
        Route::get('get-screening-exam-content',    [MobileModelController::class, 'showScreeningExamContent']);

        Route::get('get-lecture',                       [MobileModelController::class, 'showLecture']);
        Route::get('get-tutorial',                      [MobileModelController::class, 'showTutorial']);

I will be sending the entire mobile model controller and teacher controller so you can see the validation rules for all kinds of crud operation.
Analyze and take your time.



Rework the controller and view to display two tables

public function viewCourse(Courses $course, Sections $section)
    {
        if ($redirect = $this->checkTeacherAccess()) return $redirect;

        $sectionID = $section->section_id;

        $this->assertOwnsCourseSection($course->course_id, $sectionID);

        $students = Students::query()
            ->with([
                'user.image',
            ])
            ->leftJoin('studentprogress as sp', function ($q) use ($course) {
                $q->on('sp.student_id', '=', 'student.user_id')
                    ->where('sp.course_id', '=', $course->course_id);
            })
            ->where('section_id', $sectionID)
            ->join('user', 'user.user_id', '=', 'student.user_id')
            ->orderBy('user.last_name')
            ->orderBy('user.first_name')
            ->select('student.*')
            ->get();

        $userID = session()->get('user_id');
        $users = Users::with('image')->findOrFail($userID);

        $course->load([
            'modules.moduleimage',
            'longquizzes',
            'screenings',
        ]);

        /* ── PHP sorts ──────────────────────────────────────────── */
        $course->modules     = $course->modules
            ->sortBy(fn($m)  => $this->seq($m->module_name))
            ->values();

        $course->longquizzes = $course->longquizzes
            ->sortBy(fn($lq) => $this->seq($lq->long_quiz_name))
            ->values();

        $course->screenings  = $course->screenings
            ->sortBy(fn($s)  => $this->seq($s->screening_name))
            ->values();

        return view('teacher.view-course', compact('course', 'users', 'students', 'section'));
    }

<table class="std">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Points</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($students as $s):
                                $u  = $s->user;
                                if (empty($u->image?->image)) {
                                    $avatar = "/icons/no-img.jpg";
                                } else {
                                    $blob = $u->image->image;
                                    $avatar = "data:" . getMimeTypeFromBlob($blob) . ';base64,' . base64_encode($blob);
                                } ?>
                                <tr>
                                    <td>
                                        <div style="display:flex;align-items:center">
                                            <div class="std-img" style="background-image:url('<?= $avatar ?>')"></div>
                                            <?= e($s->user->last_name . ', ' . $s->user->first_name) ?>
                                        </div>
                                    </td>
                                    <td><?= $s->total_points ?? 0 ?></td>
                                    <td>
                                        <form action="/teachers-panel/course/<?= $course->course_id ?>/section/<?= $section->section_id ?>/student/<?= $s->user_id ?>/performance" method="GET">
                                            <button class="edit">
                                                View Performance
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>

Students in Catch Up Mode
(where the value of column "isCatchUp" == 1)
Display the students' average_score and total_points from studentprogress table

Students not in Catch Up Mode
(where the value of column "isCatchUp" == 0)
Display the student's results in screening exams (using screeningresult)
text displayed as -- if student has no record in a screening exam. Use the record with isKept = 1 as the updated score


Create 3 Pie Charts displaying overall analytics. I plan to put this above the first table.
Display the pie chart on the right, and the text display on the left. You can do some styling.
For the catch-up graph, put catch-up students as gray, while non-catch up as gold color.
For average_scores, the avg_score color varies depending on the score.

You can use this rule:

if ($percentage === null) {
    $color = '#d5d5d5';
    $percentage_display = '--';
} elseif ($percentage >= 80) {
    $color = '#00cc25';
    $percentage_display = round((int)$percentage);
} elseif ($percentage >= 75) {
    $color = '#adcb00';
    $percentage_display = round((int)$percentage);
} elseif ($percentage >= 50) {
    $color = '#ee8301';
    $percentage_display = round((int)$percentage);
} else {
    $color = '#ee0101';
    $percentage_display = round((int)$percentage);
}

The difference of avg_score from 100 has no color (invisible or hollow).
For the passing rate graph, green is the passing rate while is as the difference of passing rate from 100.

What analytics do I need?
Number of Students in Catch-Up and Non-Catch Up (Count all students in a section)
Average of all catch up students' average_scores
Passing Rate (rate of students' average_scores above 70%)

<div class="content padding flex-row">

                        <div class="analytics-container flex-row">
                            <div class="pie-chart-container">
                                <!-- Insert Pie Chart Here -->
                            </div>
                            <div class="analytics-summary flex-column">
                                <div class="analytics-title">
                                    <h5>Students' Status</h5>
                                </div>
                                <div class="analytics-details flex-column">
                                    <div class="analytics-name">
                                        <h6>Catch-Up Students</h6>
                                    </div>
                                    <div class="analytics-data"></div>
                                </div>
                                <div class="analytics-details flex-column">
                                    <div class="analytics-name">
                                        <h6>Non-Catch Up Students</h6>
                                    </div>
                                    <div class="analytics-data"></div>
                                </div>
                            </div>
                        </div>

                        <div class="analytics-container flex-row">
                            <div class="pie-chart-container">
                                <!-- Insert Pie Chart Here -->
                            </div>
                            <div class="analytics-summary flex-column">
                                <div class="analytics-title">
                                    <h5>Overall Performance</h5>
                                </div>
                                <div class="analytics-details flex-column">
                                    <div class="analytics-name">
                                        <h6>Average</h6>
                                    </div>
                                    <div class="analytics-data"></div>
                                </div>
                            </div>
                        </div>

                        <div class="analytics-container flex-row">
                            <div class="pie-chart-container">
                                <!-- Insert Pie Chart Here -->
                            </div>
                            <div class="analytics-summary flex-column">
                                <div class="analytics-title">
                                    <h5>Students' Evaluation</h5>
                                </div>
                                <div class="analytics-details flex-column">
                                    <div class="analytics-name">
                                        <h6>Passing Rate</h6>
                                    </div>
                                    <div class="analytics-data"></div>
                                </div>
                            </div>
                        </div>

                       
                    </div>

Let's add question types.

So far there is only multiple choice. Let's add identification type functionality.
Right now, question_type_id = 1 is multiple choice.
Detect that question_type_id = 2 means it is an identification type.

How it works is that for each question it has options, and the options that appear share the same question_id.
Options that have the value of is_correct at 1 indicates that's the correct answer. Some questions can have multiple correct answers but only need to choose 1.

The current controllers' logic only handles multiple choice type of answers at the moment.

What I want to happen is view, change the input type to text, and let the student type whenever.
If the student types the same text as at least one of the options with is_correct as 1, that means that the answer is correct and submit the option to assessmentresult_answer as the one in the option entry.
If the student types the wrong answer, create the entry in assessmentresult_answer with the student's input and put is_correct as 0.

assessmentresult is the score of a student from a quiz (using activity_id)
assessmentresult_answer is a table consisting of answers of questions from assessmentresult_id, and assessmentresult student_id

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Questions extends Model
{
    public function quiz()
    {
        return $this->belongsTo(Quizzes::class, 'activity_id', 'activity_id');
    }

    protected $table = 'question'; // Name of The Table
    protected $primaryKey = 'question_id'; // Name of The Primary Key
    public $timestamps = false;

    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'question_id',
        'question_text',
        'question_type_id',
        'score',
        'activity_id',
    ];

    public function options()
    {
        return $this->hasMany(Options::class, 'question_id');
    }

    public function questionimage()
    {
        return $this->hasOne(QuestionImages::class, 'question_id');
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Options extends Model
{
    public function question()
    {
        return $this->belongsTo(Questions::class, 'question_id', 'question_id');
    }

    protected $table = 'options'; // Name of The Table
    protected $primaryKey = 'option_id'; // Name of The Primary Key
    public $timestamps = false;

    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'option_id',
        'question_id',
        'option_text',
        'is_correct',
    ];
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class AssessmentResult extends Model
{
    public function student()
    {
        return $this->belongsTo(Students::class, 'student_id', 'user_id');
    }

    public function activity()
    {
        return $this->belongsTo(Activities::class, 'activity_id', 'activity_id');
    }

    public function quiz()
    {
        return $this->belongsTo(Quizzes::class, 'activity_id', 'activity_id');
    }

    protected $table = 'assessmentresult';
    protected $primaryKey = 'result_id';
    public $incrementing = false;
    protected $keyType = 'string';
    public $timestamps = false;

    protected $fillable = [
        'result_id',
        'student_id',
        'module_id',
        'activity_id',
        'score_percentage',
        'date_taken',
        'attempt_number',
        'tier_level_id',
        'earned_points',
        'is_kept',
    ];

    public function answers()
    {
        return $this->hasMany(AssessmentResultAnswer::class,'result_id','result_id');
    }


    public function scopeKept($q)
    {
        return $q->where('is_kept', 1);
    }
}

<?php
// app/Models/AssessmentAnswer.php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class AssessmentResultAnswer extends Model
{
    /* ---------- table & primary-key ---------- */
    protected $table      = 'assessmentresult_answers';   // exact table name
    protected $primaryKey = 'result_answer_id';
    protected $keyType = 'int';                        
    public    $timestamps   = false;                      // no created_at / updated_at columns

    /* ---------- mass-assignable columns ---------- */
    protected $fillable = [
        'result_id',
        'question_id',
        'option_id',
        'is_correct',
    ];

    /* ---------- relationships ---------- */

    /** parent “attempt” row */
    public function result()
    {
        return $this->belongsTo(
            AssessmentResult::class,
            'result_id',
            'result_id'
        );
    }

    /** quiz question (for text, type id, etc.) */
    public function question()
    {
        return $this->belongsTo(
            Questions::class,
            'question_id',
            'question_id'
        );
    }

    /** option chosen by the student */
    public function option()
    {
        return $this->belongsTo(
            Options::class,
            'option_id',
            'option_id'
        );
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Quizzes extends Model
{
    public function activity()
    {
        return $this->belongsTo(Activities::class, 'activity_id', 'activity_id');
    }

    protected $table = 'quiz'; // Name of The Table
    protected $primaryKey = 'activity_id'; // Name of The Primary Key
    public $timestamps = false;

    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'activity_id',
        'number_of_attempts',
        'quiz_type_id',
        'time_limit',
        'number_of_questions',
        'overall_points',
        'has_answers_shown',
    ];

    public function questions()
    {
        return $this->hasMany(Questions::class, 'activity_id');
    }

    public function keptResult($userID = null)
    {
        return $this->hasOne(AssessmentResult::class,'activity_id','activity_id')         
            ->where('is_kept', 1);
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Activities extends Model
{
    public function module()
    {
        return $this->belongsTo(Modules::class, 'module_id');
        // 'module_id' is the foreign key in the 'module' table
    }

    protected $table = 'activity'; // Name of The Table
    protected $primaryKey = 'activity_id'; // Name of The Primary Key
    public $timestamps = false;

    protected $keyType = 'string';
    public $incrementing = false;

    protected $fillable = [
        'activity_id',
        'module_id',
        'activity_type',
        'activity_name',
        'activity_description',
        'unlock_date',
        'deadline_date',
    ];

    public function lecture()
    {
        return $this->hasOne(Lectures::class, 'activity_id', 'activity_id');
    }

    public function tutorial()
    {
        return $this->hasOne(Tutorials::class, 'activity_id', 'activity_id');
    }

    public function quiz()
    {
        return $this->hasOne(Quizzes::class, 'activity_id', 'activity_id');
    }

    public function results()
    {
    return $this->hasMany(AssessmentResult::class, 'activity_id', 'activity_id');
    }
}

QuizController.php
public function showQuestion(Courses $course, Modules $module, Activities $activity, $index)
    {
        $courseID = $course->course_id;
        $moduleID = $module->module_id;
        $activityID = $activity->activity_id;

        $studentID = session('user_id');
        $activity = Activities::with('quiz')->findOrFail($activityID);
        $questionIDs = Session::get("quiz_{$activityID}_questions");
        $deadline = Session::get("quiz_{$activityID}_deadline");

        // Get number of attempts the student has taken
        $currentAttempts = AssessmentResult::where('student_id', $studentID)
            ->where('activity_id', $activityID)
            ->count();

        // Get the max number of allowed attempts for the quiz
        $maxAttempts = $activity->quiz->number_of_attempts;

        if ($currentAttempts >= $maxAttempts) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'You have reached the maximum number of quiz attempts.');
        }

        if (!Session::get("quiz_{$activityID}_in_progress")) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'Quiz has already ended or you accessed an invalid link.');
        }

        if (!$questionIDs || !$deadline) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'Quiz has not started yet. Wait for a bit.');
        }

        if (Carbon::now('Asia/Manila')->gt(Carbon::parse($deadline))) {
            Session::forget("quiz_{$activityID}_questions");
            Session::forget("quiz_{$activityID}_answers");
            Session::forget("quiz_{$activityID}_deadline");

            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'Timer is already finised. Invalid access.');
        }

        if (!isset($questionIDs[$index])) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'Question number unavailable.');
        }

        $questionID = $questionIDs[$index];
        $question = Questions::with(['options', 'questionimage'])->findOrFail($questionID);
        $remainingSeconds = (int) max(0, Carbon::now('Asia/Manila')->diffInSeconds(Carbon::parse($deadline), false));

        return response()->view('student.activity-quiz-interface', [
            'course' => $course,
            'module' => $module,
            'activity' => $activity,
            'question' => $question,
            'index' => $index,
            'total' => count($questionIDs),
            'remainingSeconds' => $remainingSeconds,
        ]);
    }

    public function submitAnswer(Request $request, Courses $course, Modules $module, Activities $activity, $index)
    {
        $courseID = $course->course_id;
        $moduleID = $module->module_id;
        $activityID = $activity->activity_id;

        $selectedOption = $request->input('answer');
        $answers = session()->get("quiz_{$activityID}_answers", []);
        $answers[$index] = $selectedOption;
        session()->put("quiz_{$activityID}_answers", $answers);

        $questionIDs = session("quiz_{$activityID}_questions");
        $nextIndex = $index + 1;

        $deadline = session("quiz_{$activityID}_deadline");
        $isAutoSubmit = $request->input('auto_submit') == 1;

        if ($isAutoSubmit || Carbon::now('Asia/Manila')->gt(Carbon::parse($deadline))) {
            $nextIndex = count($questionIDs); // force finish quiz
        }

        if (!$questionIDs || !$deadline) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'Invalid quiz session.');
        }

        if ($nextIndex < count($questionIDs)) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}/s/q/{$nextIndex}");
        } else {
            $correct = 0;
            foreach ($answers as $i => $selectedOptionID) {
                $questionID = $questionIDs[$i] ?? null;
                if (!$questionID) continue;
                $correctOptionID = Options::where('question_id', $questionID)->where('is_correct', 1)->value('option_id');
                if ($selectedOptionID == $correctOptionID) $correct++;
            }

            $scorePercentage = round(($correct / count($questionIDs)) * 100);
            $earnedPoints = $correct;
            $studentID = session('user_id');

            $prevAttempts = AssessmentResult::where('student_id', $studentID)->where('activity_id', $activityID)->count();

            if ($nextIndex >= count($questionIDs)) {

                $correct = 0;

                /** 1️⃣  create parent “attempt” row (same as before) */
                $result = AssessmentResult::create([
                    'result_id'        => Str::uuid()->toString(),
                    'student_id'       => $studentID,
                    'module_id'        => $moduleID,
                    'activity_id'      => $activityID,
                    'score_percentage' => $scorePercentage,
                    'earned_points'    => $earnedPoints,
                    'date_taken'       => now('Asia/Manila')->toDateTimeString(),
                    'attempt_number'   => $prevAttempts + 1,
                    'tier_level_id'    => 1,
                    'is_kept'          => 0,
                ]);

                /** 2️⃣  write each selected answer */
                foreach ($answers as $i => $selectedOptionID) {

                    $questionID = $questionIDs[$i] ?? null;
                    if (!$questionID) continue;

                    $correctOptionID = Options::where('question_id', $questionID)
                        ->where('is_correct', 1)
                        ->value('option_id');

                    $isCorrect = $selectedOptionID == $correctOptionID ? 1 : 0;
                    $correct  += $isCorrect;

                    AssessmentResultAnswer::create([
                        'result_id'   => $result->result_id,
                        'question_id' => $questionID,
                        'option_id'   => $selectedOptionID,
                        'is_correct'  => $isCorrect,
                    ]);
                }

                /** 3️⃣  update score & kept-flag exactly as you did */
                $result->update([
                    'score_percentage' => round(($correct / count($questionIDs)) * 100),
                    'earned_points'    => $correct,
                ]);

                AssessmentResult::where('student_id', $studentID)
                    ->where('activity_id', $activityID)
                    ->update(['is_kept' => 0]);

                AssessmentResult::where('student_id', $studentID)
                    ->where('activity_id', $activityID)
                    ->orderByDesc('score_percentage')
                    ->orderBy('date_taken')
                    ->first()
                    ->update(['is_kept' => 1]);

                /* … session-cleanup + redirect unchanged … */
            }

            AssessmentResult::where('student_id', $studentID)->where('activity_id', $activityID)->update(['is_kept' => 0]);
            AssessmentResult::where('student_id', $studentID)->where('activity_id', $activityID)->orderByDesc('score_percentage')->first()->update(['is_kept' => 1]);



            Session::forget("quiz_{$activityID}_questions");
            Session::forget("quiz_{$activityID}_answers");
            Session::forget("quiz_{$activityID}_deadline");
            Session::forget("quiz_{$activityID}_in_progress");

            StudentAnalytics::updateAfterQuiz(
                $studentID,
                $courseID,
                $moduleID   // null for course-level exams
            );

            AchievementService::evaluate($studentID);

            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}/summary")
                ->with('success', 'Quiz has been submitted.');
        }
    }

We will modify something with the functionality of creating long quizzes.
Instead of creating questions manually, we can use questions from other quizzes (quiz) and can select multiple to combine them.
The purpose of long quizzes is they are composed of short quizzes from multiple modules. Quizzes can serve as question banks for long quizzes.

Replace adding questions manually with a selection of quizzes using activity_id within the module, within the course.

Selection name should have the name of the module first, then the activity_name of the quiz_id.
The selected items will have their questions copied and inserted to the long quiz related tables.

Here are the models involved:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Courses extends Model
{

    protected $table = 'course';
    protected $primaryKey = 'course_id';
    protected $keyType = 'string';

    public $incrementing = false;
    public $timestamps   = false;


    protected $fillable = [
        'course_id',
        'course_code',
        'course_name',
        'course_description',
        'start_date',
        'end_date',
    ];

    public function modules()
    {
        return $this->hasMany(Modules::class, 'course_id');
    }

    public function image()
    {
        return $this->hasOne(CourseImage::class, 'course_id', 'course_id');
    }

    public function longquizzes()
    {
        return $this->hasMany(LongQuizzes::class, 'course_id');
    }

    public function screenings()
    {
        return $this->hasMany(Screening::class, 'course_id', 'course_id');
    }

    public function teachers()
    {
        return $this->belongsToMany(
            Teachers::class,
            CourseSection::class,
            'course_id',
            'teacher_id',
            'course_id',
            'user_id'
        );
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Modules extends Model
{
    public function course() {
        return $this->belongsTo(Courses::class, 'course_id');
    }

    protected $table = 'module'; 
    protected $primaryKey = 'module_id';
    public $timestamps = false;

    protected $keyType = 'string';
    public $incrementing = false;

    protected $fillable = [
        'module_id',
        'course_id',
        'module_name',
        'module_description',
        'module_image',
    ];

    public function activities()
    {
        return $this->hasMany(Activities::class, 'module_id', 'module_id');
    }

    public function moduleimage()
    {
        return $this->hasOne(ModuleImage::class, 'module_id', 'module_id');
    }

    public function studentprogress()
    {
        return $this->hasMany(
            ModuleProgress::class,      // table: moduleprogress
            'module_id',                // FK in moduleprogress
            'module_id'                 // PK in module
        );
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Activities extends Model
{
    public function module()
    {
        return $this->belongsTo(Modules::class, 'module_id');
        // 'module_id' is the foreign key in the 'module' table
    }

    protected $table = 'activity'; // Name of The Table
    protected $primaryKey = 'activity_id'; // Name of The Primary Key
    public $timestamps = false;

    protected $keyType = 'string';
    public $incrementing = false;

    protected $fillable = [
        'activity_id',
        'module_id',
        'activity_type',
        'activity_name',
        'activity_description',
        'unlock_date',
        'deadline_date',
    ];

    public function lecture()
    {
        return $this->hasOne(Lectures::class, 'activity_id', 'activity_id');
    }

    public function tutorial()
    {
        return $this->hasOne(Tutorials::class, 'activity_id', 'activity_id');
    }

    public function quiz()
    {
        return $this->hasOne(Quizzes::class, 'activity_id', 'activity_id');
    }

    public function results()
    {
    return $this->hasMany(AssessmentResult::class, 'activity_id', 'activity_id');
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Quizzes extends Model
{
    public function activity()
    {
        return $this->belongsTo(Activities::class, 'activity_id', 'activity_id');
    }

    protected $table = 'quiz'; // Name of The Table
    protected $primaryKey = 'activity_id'; // Name of The Primary Key
    public $timestamps = false;

    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'activity_id',
        'number_of_attempts',
        'quiz_type_id',
        'time_limit',
        'number_of_questions',
        'overall_points',
        'has_answers_shown',
    ];

    public function questions()
    {
        return $this->hasMany(Questions::class, 'activity_id');
    }

    public function keptResult($userID = null)
    {
        return $this->hasOne(AssessmentResult::class,'activity_id','activity_id')         
            ->where('is_kept', 1);
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Questions extends Model
{
    public function quiz()
    {
        return $this->belongsTo(Quizzes::class, 'activity_id', 'activity_id');
    }

    protected $table = 'question'; // Name of The Table
    protected $primaryKey = 'question_id'; // Name of The Primary Key
    public $timestamps = false;

    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'question_id',
        'question_text',
        'question_type_id',
        'score',
        'activity_id',
    ];

    public function options()
    {
        return $this->hasMany(Options::class, 'question_id');
    }

    public function questionimage()
    {
        return $this->hasOne(QuestionImages::class, 'question_id');
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class QuestionImages extends Model
{
    public function question() {
        return $this->belongsTo(Questions::class, 'question_id');
    }

    protected $table = 'quiz_question_image'; // Name of The Table
    protected $primaryKey = 'q_image_id'; // Name of The Primary Key
    public $timestamps = false;

    protected $fillable = [
        'q_image_id',
        'question_id',
        'image',
    ];
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Options extends Model
{
    public function question()
    {
        return $this->belongsTo(Questions::class, 'question_id', 'question_id');
    }

    protected $table = 'options'; // Name of The Table
    protected $primaryKey = 'option_id'; // Name of The Primary Key
    public $timestamps = false;

    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'option_id',
        'question_id',
        'option_text',
        'is_correct',
    ];
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class LongQuizzes extends Model
{
    public function course()
    {
        return $this->belongsTo(Courses::class, 'course_id', 'course_id');
    }

    protected $table = 'longquiz'; // Name of The Table
    protected $primaryKey = 'long_quiz_id'; // Name of The Primary Key
    public $timestamps = false;

    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'long_quiz_id',
        'course_id',
        'long_quiz_name',
        'long_quiz_instructions',
        'number_of_attempts',
        'time_limit',
        'number_of_questions',
        'overall_points',
        'has_answers_shown',
        'unlock_date',
        'deadline_date',
    ];

    public function longquizquestions()
    {
        return $this->hasMany(LongQuizQuestions::class, 'long_quiz_id', 'long_quiz_id');
    }

    public function assessments()
    {
        return $this->hasMany(LongQuizAssessmentResult::class, 'long_quiz_id', 'long_quiz_id');
    }

    public function keptResult()
    {
        return $this->hasOne(LongQuizAssessmentResult::class,'long_quiz_id','long_quiz_id')         
            ->where('is_kept', 1);
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class LongQuizQuestions extends Model
{
    public function longquiz()
    {
        return $this->belongsTo(LongQuizzes::class,'long_quiz_id','long_quiz_id'); 
    }

    protected $table = 'longquiz_question'; // Name of The Table
    protected $primaryKey = 'long_quiz_question_id'; // Name of The Primary Key
    public $timestamps = false;

    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'long_quiz_question_id',
        'long_quiz_id',
        'question_text',
        'question_image',
        'question_type_id',
        'score',
    ];

    public function longquizoptions()
    {
        return $this->hasMany(LongQuizOptions::class,'long_quiz_question_id','long_quiz_question_id');
    }

    public function longquizimage()
    {
        return $this->hasOne(LongQuizQuestionImages::class,'long_quiz_question_id','long_quiz_question_id');
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class LongQuizQuestionImages extends Model
{
    public function longquizquestion() {
        return $this->belongsTo(LongQuizQuestions::class, 'long_quiz_question_id');
    }

    protected $table = 'longquiz_question_image'; // Name of The Table
    protected $primaryKey = 'lq_image_id'; // Name of The Primary Key
    public $timestamps = false;

    protected $fillable = [
        'lq_image_id',
        'long_quiz_question_id',
        'image',
    ];
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class LongQuizOptions extends Model
{
       public function longquizquestion()
    {
        return $this->belongsTo(LongQuizQuestions::class, 'long_quiz_question_id');
    }

    protected $table = 'longquiz_option'; // Name of The Table
    protected $primaryKey = 'long_quiz_option_id'; // Name of The Primary Key
    public $timestamps = false;

    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'long_quiz_option_id',
        'long_quiz_question_id',
        'option_text',
        'is_correct',
    ];
}

TeacherController.php 
public function createLongQuiz(
        Courses $course,
        Sections $section
    ) {
        if ($redirect = $this->checkTeacherAccess()) return $redirect;

        $sectionID = $section->section_id;

        $this->assertOwnsCourseSection($course->course_id, $section->section_id);

        $users = Users::with('image')->findOrFail(session('user_id'));
        return view('teacher.longquiz-create', compact('course', 'section', 'users'));
}

public function storeLongQuiz(Request $req, Courses $course, $sectionId)
    {
        /* ---------- validation ---------- */
        $rules = [
            'long_quiz_name'         => 'required|string|max:255',
            'long_quiz_instructions' => 'required|string',
            'number_of_attempts'     => 'required|integer|min:1',
            'number_of_questions'    => 'required|integer|min:1',
            'time_limit_minutes'     => 'required|integer|min:1',
            'unlock_date'            => 'required|date',
            'deadline_date'          => 'required|date|after:unlock_date',
            'has_answers_shown'      => 'nullable|boolean',

            /* question / option structure */
            'questions'                      => 'required|array|min:1',
            'questions.*.text'               => 'required|string',
            'questions.*.correct'            => 'required|integer|min:0',
            'questions.*.options'            => 'required|array|min:1|max:4',
            'questions.*.options.*'          => 'required|string',
            'questions.*.image'              => 'nullable|image|max:2048',
        ];

        $validator = Validator::make($req->all(), $rules);

        /* make sure the question bank ≥ draw size */
        $validator->after(function ($v) use ($req) {
            if (count($req->questions) < $req->number_of_questions) {
                $v->errors()->add(
                    'number_of_questions',
                    '“Number of Questions” can’t exceed the number of questions you entered.'
                );
            }
        });

        $validator->validate();

        /* ---------- DB tx ---------- */
        DB::transaction(function () use ($req, $course) {

            /* 1) quiz shell */
            $longquiz = LongQuizzes::create([
                'long_quiz_id'          => Str::uuid()->toString(),
                'course_id'             => $course->course_id,
                'long_quiz_name'        => $req->long_quiz_name,
                'long_quiz_instructions' => $req->long_quiz_instructions,
                'number_of_attempts'    => $req->number_of_attempts,
                'number_of_questions'   => $req->number_of_questions,
                'overall_points'        => $req->number_of_questions,
                'time_limit'            => $req->time_limit_minutes * 60,
                'has_answers_shown'     => $req->boolean('has_answers_shown'),
                'unlock_date'           => Carbon::parse($req->unlock_date),
                'deadline_date'         => Carbon::parse($req->deadline_date),
            ]);

            /* 2) questions + options */
            foreach ($req->questions as $qData) {

                $question = $longquiz->longquizquestions()->create([
                    'long_quiz_question_id' => Str::uuid()->toString(),
                    'question_text'         => $qData['text'],
                    'question_type_id'      => 1,
                    'score'                 => 1,
                ]);

                /* optional image */
                if (isset($qData['image'])) {
                    $img = $qData['image'];
                    $question->longquizimage()->updateOrCreate(
                        [],
                        [
                            'image'     => file_get_contents($img->getRealPath()),
                            'mime_type' => $img->getMimeType() ?? 'image/jpeg',
                        ]
                    );
                }

                /* options */
                foreach ($qData['options'] as $oIdx => $optText) {
                    $question->longquizoptions()->create([
                        'long_quiz_option_id' => Str::uuid()->toString(),
                        'option_text'         => $optText,
                        'is_correct'          => ($oIdx == $qData['correct']) ? 1 : 0,
                    ]);
                }
            }
        });

        return back()->with('success', 'Long-quiz created.');
    }

longquiz-create.php (view)
<?php $title = "Add New Long Quiz";
include __DIR__ . '/../partials/head.php'; ?>
<style>
    /* simple demo styles – tweak/add your own */
    .q-block {
        border: 1px dashed #bbb;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .opt-row {
        display: flex;
        gap: .3rem;
        align-items: center;
        margin: .3rem 0;
    }

    .opt-row input[type=text] {
        flex: 1;
    }
</style>
<script>
    let qIndex = 0;

    function addOption(wrap, qI) {
        const optCount = wrap.children.length; // 0-based
        const tpl = document.getElementById('opt-template')
            .content.cloneNode(true);

        tpl.querySelectorAll('[data-repl]').forEach(el => {
            el.name = el.name.replace('__i__', qI).replace('__o__', optCount);
            if (el.type === 'radio') el.value = optCount; // int value
        });
        wrap.appendChild(tpl);
    }

    function addQuestion(prefill = null) {
        const tpl = document.getElementById('q-template')
            .content.cloneNode(true).firstElementChild;

        tpl.dataset.qi = qIndex; // store idx
        tpl.querySelectorAll('[data-repl]').forEach(el => {
            el.name = el.name.replace('__i__', qIndex);
            if (prefill) {
                if (el.dataset.repl === 'text') el.value = prefill.text ?? '';
            }
        });

        /* remove button */
        tpl.querySelector('.q-remove').onclick = e => {
            const total = document.querySelectorAll('.q-block').length;
            if (total > 1) e.currentTarget.closest('.q-block').remove();
        };

        /* “+ Option” button */
        tpl.querySelector('.opt-add').onclick = e => {
            const block = e.currentTarget.closest('.q-block');
            addOption(block.querySelector('.opt-wrap'), block.dataset.qi);
        };

        /* put an initial option row */
        addOption(tpl.querySelector('.opt-wrap'), qIndex);

        document.getElementById('question-list').appendChild(tpl);
        qIndex++;
    }

    document.addEventListener('DOMContentLoaded', () => addQuestion()); // first block
</script>
</head>

<body>

    <?php
    include __DIR__ . '/../partials/nav-teach.php';
    ?>
    <div class="screen">
        <div class="spacing main">
            <form method="POST" action="/teachers-panel/course/<?= $course->course_id ?>/section/<?= $section->section_id ?>/store-longquiz" enctype="multipart/form-data">
                <?= csrf_field(); ?>
                <div class="content-container box-page">
                    <div class="mini-navigation">
                        <div class="text title">
                            <h6><a href="/teachers-panel">Courses</a></h6>
                            <div class="line"></div>
                        </div>
                        <div class="divider">
                            <h6> > </h6>
                        </div>
                        <div class="text title">
                            <h6><a href="/teachers-panel/course/<?= $course->course_id ?>/section/<?= $section->section_id ?>"><?= $course->course_name ?></a></h6>
                            <div class="line"></div>
                        </div>
                        <div class="divider">
                            <h6> > </h6>
                        </div>
                        <div class="text title">
                            <h6>Add New Long Quiz</h6>
                            <div class="line active"></div>
                        </div>
                    </div>
                </div>
                <br>

                <div class="content-container">

                    <div class="content padding box-gray">

                        <div class="header">
                            <div class="text title">
                                <h4> Add A New Long Quiz </h4>
                            </div>
                        </div>

                    </div>
                </div>
                <br>

                                <div class="content-container box-page">
                    <div class="content">
                        <?php if ($errors->any()): ?>
                            <div class="alert alert-danger alert-message padding">
                                <ul><?php foreach ($errors->all() as $msg): ?><li><?= htmlspecialchars($msg) ?></li><?php endforeach; ?></ul>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>

                <div class="content-container box-page">
                    <div class="content padding box-page">
                        <div class="content flex-column">
                            <div class="form-box">
                                <div class="form-label"><label>Name:</label></div>
                                <div class="form-input"><input type="text" name="long_quiz_name" required></div>
                            </div>

                            <div class="form-box">
                                <div class="form-label"><label>Instructions:</label></div>
                                <div class="form-input"><textarea name="long_quiz_instructions"></textarea></div>
                            </div>

                            <div class="form-box">
                                <div class="form-label"><label>Number of Attempts:</label></div>
                                <div class="form-input"><input type="number" name="number_of_attempts" min="1" value="10" required></div>
                            </div>

                            <div class="form-box">
                                <div class="form-label"><label>Number of Questions:</label></div>
                                <div class="form-input"><input type="number" name="number_of_questions" min="1" required></div>
                            </div>

                            <div class="form-box">
                                <div class="form-label"><label>Time Limit (minutes):</label></div>
                                <div class="form-input"><input type="number" name="time_limit_minutes" min="1" value="30" required></div>
                            </div>

                            <div class="form-box">
                                <div class="form-label"><label>Unlock Date:</label></div>
                                <div class="form-input"><input type="datetime-local" name="unlock_date" required></div>
                            </div>

                            <div class="form-box">
                                <div class="form-label"><label>Deadline:</label></div>
                                <div class="form-input"><input type="datetime-local" name="deadline_date" required></div>
                            </div>

                            <div class="form-box">
                                <div class="form-label checkbox"><label>Show Answers After Submission:</label></div>
                                <div class="form-input"><input type="checkbox" name="has_answers_shown" value="1"></div>
                            </div>

                        </div>

                    </div>

                </div>
                <div class="content-container box-page">
                    <div class="content padding box-page">
                        <div class="header">
                            <h5>Questions</h5>
                        </div>
                        <div id="question-list"></div>
                        <button type="button" class="edit" onclick="addQuestion()">+ Add Question</button>
                    </div>
                </div>
                <br>

                <div class="content-container">
                    <div class="content">
                        <div class="form-button">
                            <button class="edit" onclick="return confirm('Create a new long quiz?');">Create Long Quiz</button>
                        </div>
                    </div>
                </div>

            </form>

        </div>

        <!-- templates (hidden) ---------------------------------------------->
        <template id="q-template">
            <div class="q-block">
                <div class="q-remove crud-button-delete">🗑 Remove Question</div>
                <div class="form-box">
                    <div class="form-label"><label>Question Text:</label></div>
                    <div class="form-input"><textarea data-repl="text" name="questions[__i__][text]" required></textarea></div>
                </div>

                <div class="form-box">
                    <div class="form-label"><label>Image (optional):</label></div>
                    <div class="form-input"><input type="file" data-repl name="questions[__i__][image]" accept="image/*"></div>
                </div>

                <div class="opt-wrap">
                    <!-- options will appear here -->
                </div>
                <button type="button" class="edit opt-add">+ Add Option</button>
            </div>
        </template>

        <template id="opt-template">
            <div class="opt-row">
                <input type="radio" data-repl name="questions[__i__][correct]" value="__o__">
                <input type="text" data-repl name="questions[__i__][options][__o__]"
                    placeholder="Option text" required>
            </div>
        </template>


        <div class="spacing side">
            <?php include __DIR__ . '/../partials/right-side-notifications.php'; ?>
        </div>
    </div>
    <?php include __DIR__ . '/../partials/footer.php'; ?>
</body>

</html>


This is the quiz interface.

In div class spacing side, replace this partial:
<?php include __DIR__ . '/../partials/right-side-notifications.php';  ?>
with the list of question numbers with the url to the question itself.

This is so that students can re-access the question so they wish if they want to review the question and their answer again.

Also, when accessing the question, the question selections are not saved (or at least not auto selected when already stored in the session).
Make them auto select if there is one stored in session.

public function showQuestion(Courses $course, Modules $module, Activities $activity, $index)
    {
        $courseID = $course->course_id;
        $moduleID = $module->module_id;
        $activityID = $activity->activity_id;

        $studentID = session('user_id');
        $activity = Activities::with('quiz')->findOrFail($activityID);
        $questionIDs = Session::get("quiz_{$activityID}_questions");
        $deadline = Session::get("quiz_{$activityID}_deadline");

        // Get number of attempts the student has taken
        $currentAttempts = AssessmentResult::where('student_id', $studentID)
            ->where('activity_id', $activityID)
            ->count();

        // Get the max number of allowed attempts for the quiz
        $maxAttempts = $activity->quiz->number_of_attempts;

        if ($currentAttempts >= $maxAttempts) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'You have reached the maximum number of quiz attempts.');
        }

        if (!Session::get("quiz_{$activityID}_in_progress")) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'Quiz has already ended or you accessed an invalid link.');
        }

        if (!$questionIDs || !$deadline) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'Quiz has not started yet. Wait for a bit.');
        }

        if (Carbon::now('Asia/Manila')->gt(Carbon::parse($deadline))) {
            Session::forget("quiz_{$activityID}_questions");
            Session::forget("quiz_{$activityID}_answers");
            Session::forget("quiz_{$activityID}_deadline");

            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'Timer is already finised. Invalid access.');
        }

        if (!isset($questionIDs[$index])) {
            return redirect("/home-tutor/course/$courseID/module/$moduleID/quiz/{$activityID}")
                ->with('error', 'Question number unavailable.');
        }

        $questionID = $questionIDs[$index];
        $question = Questions::with(['options', 'questionimage'])->findOrFail($questionID);
        $remainingSeconds = (int) max(0, Carbon::now('Asia/Manila')->diffInSeconds(Carbon::parse($deadline), false));

        return response()->view('student.activity-quiz-interface', [
            'course' => $course,
            'module' => $module,
            'activity' => $activity,
            'question' => $question,
            'index' => $index,
            'total' => count($questionIDs),
            'remainingSeconds' => $remainingSeconds,
        ]);
    }


<body>
    <?php
    include __DIR__ . '/../partials/nav.php';
    include __DIR__ . '/../partials/quiz-type-check.php';
    include __DIR__ . '/../partials/time-lock-check.php';
    include __DIR__ . '/../partials/time-limit-conversion.php';
    ?>

    <div class="screen">
        <div class="spacing main">
            <div class="content-container box-gold">

                <div class="content padding">
                    <div class="header logo-sub">
                        <div class="logo-and-title">
                            <div class="logo">
                                <img class="svg" src="/icons/<?= $class ?>.svg" width="50em" height="auto" />
                            </div>
                            <div class="text title">
                                <h4><?= $activity->activity_name ?></h4>
                                <h6><?= $quiz_type ?></h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br>

            <div class="content-container box-page">
                <div class="content">
                    <div class="module-section quiz-interface quiz-background <?= $class ?>">
                        <div class="quiz-interface-header">
                            <div class="quiz-interface-header-question-number">
                                <p>QUESTION <?= $index + 1 ?></p>
                            </div>
                            <div class="quiz-interface-header-right-side">
                                <div class="quiz-interface-header-question-total">
                                    <p>Q<?= $index + 1 ?> OF <?= $total ?></p>
                                    <p>Time Left: <span id="quiz-timer">--:--</span></p>
                                </div>
                                <div class="quiz-interface-header-logo">
                                    <img class="svg" src="/icons/<?= $class ?>.svg" width="50em" height="auto" />
                                </div>
                            </div>
                        </div>
                        <div class="quiz-interface-question">
                            <p><?= nl2br(htmlspecialchars($question->question_text)) ?></p>
                            <?php
                            if (empty($question->questionimage?->image)) {;
                            } else {
                                $blobData = $question->questionimage?->image;
                                $mimeType = getMimeTypeFromBlob($blobData);
                                $base64Image = base64_encode($blobData);
                                $imageURL = "data:$mimeType;base64,$base64Image";
                                echo '<img src="' . $imageURL . '" width="250em" height="auto" />';
                            }
                            ?>
                        </div>
                        <form class="quiz-interface-forms" method="POST" action="/home-tutor/course/<?= $course->course_id ?>/module/<?= $module->module_id ?>/quiz/<?= $activity->activity_id ?>/s/q/<?= $index ?>">
                            <?= csrf_field() ?>
                            <div class="quiz-interface-answers">
                                <?php if ($question->question_type_id === 1): ?>
                                    <?php $question->setRelation(
                                        'options',
                                        $question->options->shuffle()
                                    );
                                    $opts = $question->options->shuffle();
                                    foreach ($opts as $option): ?>
                                        <div class="radio-button radio-<?= $class ?>">
                                            <input type="radio" id="opt<?= $option->option_id ?>" name="answer" value="<?= $option->option_id ?>" required>
                                            <label for="opt<?= $option->option_id ?>"><?= $option->option_text ?></label>
                                        </div>
                                    <?php endforeach; ?>
                                <?php else: ?>
                                    <div class="identification-input">
                                        <input
                                            type="text"
                                            id="answer_text"
                                            name="answer_text"
                                            required
                                            autocomplete="off" />
                                    </div>
                                <?php endif; ?>
                            </div>
                            <button type="submit" class="quiz-interface-submit <?= $buttonClass ?>">
                                <?= ($index + 1 < $total) ? 'NEXT' : 'SUBMIT' ?>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="spacing side">
            <?php include __DIR__ . '/../partials/right-side-notifications.php';  ?>
        </div>

    </div>
    <?php include __DIR__ . '/../partials/footer.php'; ?>
</body>

<script>
    console.log('Hello');

    let secondsLeft = <?= $remainingSeconds ?>;
    const timerElement = document.getElementById('quiz-timer');
    const form = document.querySelector('form');

    function updateTimer() {
        const minutes = Math.floor(secondsLeft / 60);
        const seconds = secondsLeft % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;

        if (secondsLeft > 0) {
            secondsLeft--;
            setTimeout(updateTimer, 1000);
        } else {
            autoSubmitQuiz();
        }
    }

    function autoSubmitQuiz() {
        const selected = document.querySelector('input[name="answer"]:checked');
        const form = document.querySelector('form');

        const input = document.createElement("input");
        input.type = "hidden";
        input.name = "auto_submit";
        input.value = "1";
        form.appendChild(input);

        if (!selected) {
            const blank = document.createElement("input");
            blank.type = "hidden";
            blank.name = "answer";
            blank.value = "";
            form.appendChild(blank);
        }

        form.submit();
    }

    updateTimer();

    const radioButtons = document.querySelectorAll('input[type="radio"][name="answer"]');

    radioButtons.forEach(radio => {
        radio.addEventListener('change', () => {
            document.querySelectorAll('.radio-button').forEach(div => {
                div.classList.remove('selected');
            });
            if (radio.checked) {
                radio.closest('.radio-button').classList.add('selected');
            }
        });
    });
</script>


</html>